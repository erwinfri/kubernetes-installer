# Windows Server 2025 Uninstallation Tasks
# Controller remains top-level.

---
# Windows Server 2025 Uninstallation Module
# This module handles the complete removal of Windows Server 2025 VM and all related resources

- name: Display uninstallation information
  ansible.builtin.debug:
    msg:
      - "üóëÔ∏è  Windows Server 2025 Uninstallation Module"
      - "VM Name: {{ vm_name }}"
      - "Namespace: {{ kubevirt_namespace }}"
      - "This will remove ALL Windows Server resources and data"

- name: Display uninstallation warning
  ansible.builtin.debug:
    msg:
      - "‚ö†Ô∏è  WARNING: Proceeding with automatic uninstallation"
      - "This will permanently delete:"
      - "  - Windows Server 2025 VM"
      - "  - All VM data and disk images"
      - "  - Storage volumes and claims"
      - "  - Access services"

- name: Check existing resources
  block:
    - name: Check if VM exists
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: existing_vm

    - name: Check if VMI exists
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: existing_vmi

    - name: Display current status
      ansible.builtin.debug:
        msg:
          - "üìã Current Status:"
          - "  VM Exists: {{ 'Yes' if existing_vm.resources | length > 0 else 'No' }}"
          - "  VMI Running: {{ 'Yes' if existing_vmi.resources | length > 0 else 'No' }}"
          - "  VM Status: {{ existing_vm.resources[0].status.printableStatus | default('N/A') if existing_vm.resources | length > 0 else 'N/A' }}"

- name: Stop and remove VM
  block:
    - name: Stop VM if running
      ansible.builtin.shell: |
        if kubectl get vmi {{ vm_name }} -n {{ kubevirt_namespace }} &>/dev/null; then
          echo "Stopping VMI {{ vm_name }}..."
          virtctl stop {{ vm_name }} -n {{ kubevirt_namespace }} || true
          echo "VMI stop command sent"
        else
          echo "No running VMI found"
        fi
      register: vm_stop_result

    - name: Display stop result
      ansible.builtin.debug:
        msg: "{{ vm_stop_result.stdout }}"

    - name: Wait for VMI to stop
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: vmi_status
      until: vmi_status.resources | length == 0
      retries: 30
      delay: 10
      ignore_errors: true

    - name: Force delete VMI if still exists
      kubernetes.core.k8s:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
        state: absent
        wait: true
        wait_timeout: 60
      ignore_errors: true

    - name: Remove finalizers from stuck VMI if needed
      ansible.builtin.shell: |
        if kubectl get vmi {{ vm_name }} -n {{ kubevirt_namespace }} &>/dev/null; then
          echo "VMI still exists, removing finalizers..."
          kubectl patch vmi {{ vm_name }} -n {{ kubevirt_namespace }} --type=merge -p '{"metadata":{"finalizers":null}}'
          echo "Finalizers removed, forcing deletion..."
          kubectl delete vmi {{ vm_name }} -n {{ kubevirt_namespace }} --force --grace-period=0 || true
        else
          echo "VMI successfully deleted"
        fi
      register: vmi_force_delete
      ignore_errors: true

    - name: Display force delete result
      ansible.builtin.debug:
        msg: "{{ vmi_force_delete.stdout }}"

- name: Remove all Windows Server resources
  block:
    - name: Remove VM and related Kubernetes resources
      kubernetes.core.k8s:
        api_version: "{{ item.api_version }}"
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ kubevirt_namespace if item.namespaced else omit }}"
        state: absent
        wait: true
        wait_timeout: 60
      loop:
        # VM
        - api_version: kubevirt.io/v1
          kind: VirtualMachine
          name: "{{ vm_name }}"
          namespaced: true
        # Sysprep Secret
        - api_version: v1
          kind: Secret
          name: "{{ vm_name }}-sysprep"
          namespaced: true

        # Services
        - api_version: v1
          kind: Service
          name: "{{ vm_name }}-vnc"
          namespaced: true
        - api_version: v1
          kind: Service
          name: "{{ vm_name }}-rdp"
          namespaced: true
        - api_version: v1
          kind: Service
          name: "{{ vm_name }}-winrm"
          namespaced: true
        - api_version: v1
          kind: Service
          name: "{{ vm_name }}-winrm-https"
          namespaced: true

        # PVCs (using vm_name variable)
        - api_version: v1
          kind: PersistentVolumeClaim
          name: "{{ vm_name }}-installer-pvc"
          namespaced: true
        - api_version: v1
          kind: PersistentVolumeClaim
          name: "{{ vm_name }}-system-pvc"
          namespaced: true
        - api_version: v1
          kind: PersistentVolumeClaim
          name: "{{ vm_name }}-virtio-iso-pvc"
          namespaced: true

        # PVs (cluster-scoped; using vm_name variable)
        - api_version: v1
          kind: PersistentVolume
          name: "{{ vm_name }}-installer-pv"
          namespaced: false
        - api_version: v1
          kind: PersistentVolume
          name: "{{ vm_name }}-system-pv"
          namespaced: false
        - api_version: v1
          kind: PersistentVolume
          name: "{{ vm_name }}-virtio-iso-pv"
          namespaced: false
      ignore_errors: true

    - name: Force remove stuck VM with finalizer removal
      ansible.builtin.shell: |
        if kubectl get vm {{ vm_name }} -n {{ kubevirt_namespace }} &>/dev/null; then
          echo "VM still exists, removing finalizers..."
          kubectl patch vm {{ vm_name }} -n {{ kubevirt_namespace }} --type=merge -p '{"metadata":{"finalizers":null}}'
          echo "Finalizers removed, forcing VM deletion..."
          kubectl delete vm {{ vm_name }} -n {{ kubevirt_namespace }} --force --grace-period=0 || true
        else
          echo "VM successfully deleted"
        fi
      register: vm_force_delete
      ignore_errors: true

    - name: Display VM force delete result
      ansible.builtin.debug:
        msg: "{{ vm_force_delete.stdout }}"

    - name: Wait for resource cleanup
      ansible.builtin.wait_for:
        timeout: 10

- name: Remove storage data
  block:
    - name: Check storage directories and disk images
      ansible.builtin.stat:
        path: "{{ item }}"
      register: storage_items
      loop:
        - "{{ storage_dir }}/{{ vm_name }}-system-disk"
        - "{{ storage_dir }}/{{ vm_name }}-system-disk/disk.img"
        - "{{ storage_dir }}/{{ vm_name }}-installer"
        - "{{ storage_dir }}/{{ vm_name }}-installer/disk.img"
        - "{{ storage_dir }}/{{ vm_name }}-virtio-iso"
        - "{{ storage_dir }}/{{ vm_name }}-virtio-iso/disk.img"
        - "{{ storage_dir }}/Autounattend.xml"
        - "{{ storage_dir }}/Install-VirtIO.ps1"
        - "{{ storage_dir }}/SetupComplete.cmd"

    - name: Display storage cleanup information
      ansible.builtin.debug:
        msg:
          - "üóÇÔ∏è  Storage cleanup information:"
          - "  System Disk Directory: {{ storage_dir }}/{{ vm_name }}-system-disk/ ({{ 'EXISTS' if storage_items.results[0].stat.exists else 'NOT FOUND' }})"
          - "  System Disk Image: {{ storage_dir }}/{{ vm_name }}-system-disk/disk.img ({{ 'EXISTS' if storage_items.results[1].stat.exists else 'NOT FOUND' }})"
          - "  Installer Directory: {{ storage_dir }}/{{ vm_name }}-installer/ ({{ 'EXISTS' if storage_items.results[2].stat.exists else 'NOT FOUND' }})"
          - "  Installer Disk Image: {{ storage_dir }}/{{ vm_name }}-installer/disk.img ({{ 'EXISTS' if storage_items.results[3].stat.exists else 'NOT FOUND' }})"
          - "  VirtIO ISO Directory: {{ storage_dir }}/{{ vm_name }}-virtio-iso/ ({{ 'EXISTS' if storage_items.results[4].stat.exists else 'NOT FOUND' }})"
          - "  VirtIO ISO Image: {{ storage_dir }}/{{ vm_name }}-virtio-iso/disk.img ({{ 'EXISTS' if storage_items.results[5].stat.exists else 'NOT FOUND' }})"
          - "  Autounattend.xml: {{ storage_dir }}/Autounattend.xml ({{ 'EXISTS' if storage_items.results[6].stat.exists else 'NOT FOUND' }})"
          - "  Install-VirtIO.ps1: {{ storage_dir }}/Install-VirtIO.ps1 ({{ 'EXISTS' if storage_items.results[7].stat.exists else 'NOT FOUND' }})"
          - "  SetupComplete.cmd: {{ storage_dir }}/SetupComplete.cmd ({{ 'EXISTS' if storage_items.results[8].stat.exists else 'NOT FOUND' }})"

    - name: Remove individual disk image files first
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ storage_dir }}/{{ vm_name }}-system-disk/disk.img"
        - "{{ storage_dir }}/{{ vm_name }}-installer/disk.img"
        - "{{ storage_dir }}/{{ vm_name }}-virtio-iso/disk.img"
      register: disk_removal

    - name: Remove storage directories and remaining files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ storage_dir }}/{{ vm_name }}-system-disk"
        - "{{ storage_dir }}/{{ vm_name }}-installer"
        - "{{ storage_dir }}/{{ vm_name }}-virtio-iso"
        - "{{ storage_dir }}/Autounattend.xml"
        - "{{ storage_dir }}/Install-VirtIO.ps1"
        - "{{ storage_dir }}/SetupComplete.cmd"
      register: directory_removal

    - name: Verify disk images are removed
      ansible.builtin.stat:
        path: "{{ item }}"
      register: disk_verification
      loop:
        - "{{ storage_dir }}/{{ vm_name }}-system-disk/disk.img"
        - "{{ storage_dir }}/{{ vm_name }}-installer/disk.img"
        - "{{ storage_dir }}/{{ vm_name }}-virtio-iso/disk.img"

    - name: Display storage removal result
      ansible.builtin.debug:
        msg:
          - "üìÅ Storage cleanup completed:"
          - "  System disk image removed: {{ 'YES' if not disk_verification.results[0].stat.exists else 'NO - STILL EXISTS' }}"
          - "  Installer disk image removed: {{ 'YES' if not disk_verification.results[1].stat.exists else 'NO - STILL EXISTS' }}"
          - "  VirtIO ISO removed: {{ 'YES' if not disk_verification.results[2].stat.exists else 'NO - STILL EXISTS' }}"
          - "  All directories and files cleaned up successfully"

- name: Verify cleanup
  block:
    - name: Check remaining VM resources
      kubernetes.core.k8s_info:
        api_version: "{{ item.api_version }}"
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ kubevirt_namespace if item.namespaced else omit }}"
      register: remaining_resources
      loop:
        - { api_version: "kubevirt.io/v1", kind: "VirtualMachine", name: "{{ vm_name }}", namespaced: true }
        - { api_version: "kubevirt.io/v1", kind: "VirtualMachineInstance", name: "{{ vm_name }}", namespaced: true }
        - { api_version: "v1", kind: "PersistentVolumeClaim", name: "{{ vm_name }}-system-pvc", namespaced: true }
        - { api_version: "v1", kind: "PersistentVolume", name: "{{ vm_name }}-system-pv", namespaced: false }
      ignore_errors: true

    - name: Display cleanup verification
      ansible.builtin.debug:
        msg:
          - "üîç Cleanup Verification:"
          - "  VM: {{ 'REMOVED' if remaining_resources.results[0].resources | length == 0 else 'STILL EXISTS' }}"
          - "  VMI: {{ 'REMOVED' if remaining_resources.results[1].resources | length == 0 else 'STILL EXISTS' }}"
          - "  System PVC: {{ 'REMOVED' if remaining_resources.results[2].resources | length == 0 else 'STILL EXISTS' }}"
          - "  System PV: {{ 'REMOVED' if remaining_resources.results[3].resources | length == 0 else 'STILL EXISTS' }}"

    - name: Display uninstallation summary
      ansible.builtin.debug:
        msg:
          - "‚úÖ Windows Server 2025 Uninstallation Complete!"
          - ""
          - "üóëÔ∏è  Removed Resources:"
          - "  - Windows Server 2025 VM ({{ vm_name }})"
          - "  - Virtual Machine Instance"
          - "  - All PersistentVolumes and PersistentVolumeClaims"
          - "  - VNC and RDP Services"
          - "  - Storage data (if confirmed)"
          - ""
          - "üìã Post-Uninstall Status:"
          - "  - VM Resources: Removed"
          - "  - Storage: Removed"
          - "  - Namespace: Preserved ({{ kubevirt_namespace }})"
          - ""
          - "üîÅ To reinstall:"
          - "  ansible-playbook windows-server-unified-controller.yaml -e action=install -e windows_version=2025"
