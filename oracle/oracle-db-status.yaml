---

- name: Oracle VM Status
  hosts: localhost
  gather_facts: no
  vars:
    vm_name: "{{ vm_name | default('oracle-vm') }}"
    kind: "{{ kind | default('VirtualMachine') }}"
    kubevirt_namespace: "{{ kubevirt_namespace | default('default') }}"
    oracle_vault_secret: "{{ oracle_vault_secret | default('secret/data/oracle-vm/admin') }}"
    oracle_user: "{{ oracle_user | default('oracle') }}"
    oracle_password: "{{ oracle_password | default('Oracle123') }}"
    oracle_admin_password: "{{ oracle_admin_password | default('Oracle123') }}"

  pre_tasks:
    - name: Set kubevirt_namespace default if not provided
      ansible.builtin.set_fact:
        kubevirt_namespace: "{{ kubevirt_namespace | default('default') }}"

    - name: Ensure port-forward script exists and is executable
      ansible.builtin.stat:
        path: "{{ playbook_dir }}/library/start_portforward.sh"
      register: portforward_script_stat

    - name: Fail if port-forward script is missing or not executable
      ansible.builtin.fail:
        msg: "Port-forward script is missing or not executable: {{ playbook_dir }}/library/start_portforward.sh"
      when: not portforward_script_stat.stat.exists or not portforward_script_stat.stat.mode|int is search('7')

    - name: Port-forward Vault service for local access
      ansible.builtin.shell: |
        ./library/start_portforward.sh vault 8200 default /tmp/vault-portforward.log /tmp/vault-portforward.pid
        sleep 5
      async: 10
      poll: 0
      register: port_forward_job

    - name: Show Vault port-forward log for troubleshooting
      ansible.builtin.shell: cat /tmp/vault-portforward.log || true
      register: vault_portforward_log
      changed_when: false
      ignore_errors: true
      tags: always

    - name: Display Vault port-forward log output
      ansible.builtin.debug:
        var: vault_portforward_log.stdout
      tags: always

    - name: Wait for Vault API to be reachable on localhost:8200
      ansible.builtin.wait_for:
        host: localhost
        port: 8200
        delay: 2
        timeout: 30
        state: started
      tags: always

    # Set Vault environment variables for all Vault operations and CLI login
    - name: Set Vault environment variables for Ansible and CLI
      ansible.builtin.set_fact:
        vault_env:
          VAULT_ADDR: "http://localhost:8200"
          VAULT_TOKEN: "{{ lookup('pipe', 'jq -r .root_token /root/vault-init.json') }}"
        vault_addr: "http://localhost:8200"
        vault_token: "{{ lookup('pipe', 'jq -r .root_token /root/vault-init.json') }}"
      tags: always

    # Read Oracle admin password from Vault
    - name: Read Oracle admin password from Vault
      ansible.builtin.shell: |
        vault read -field=password {{ oracle_vault_secret }}
      environment: "{{ vault_env }}"
      register: vault_oracle_pw
      changed_when: false
      failed_when: false

    - name: Set oracle_admin_password from Vault (if available)
      ansible.builtin.set_fact:
        oracle_admin_password: "{{ vault_oracle_pw.stdout | trim }}"
      when: vault_oracle_pw.rc == 0 and vault_oracle_pw.stdout | trim | length > 0

  tasks:
    - name: Display Oracle VM status check information
      ansible.builtin.debug:
        msg:
          - "üîç Oracle VM Status Check"
          - "VM Name: {{ vm_name }}"
          - "Namespace: {{ kubevirt_namespace }}"
          - "Oracle User: {{ oracle_user }}"
          - "Vault Secret Path: {{ oracle_vault_secret }}"

    - name: Check if target VM exists and is running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: target_vmi

    - name: Get Oracle VM status
      block:
        - name: Get VM IP address
          ansible.builtin.set_fact:
            vm_ip: "{{ target_vmi.resources[0].status.interfaces[0].ipAddress }}"
          when: target_vmi.resources | length > 0 and target_vmi.resources[0].status.interfaces is defined

        - name: Display VM basic information
          ansible.builtin.debug:
            msg:
              - "VM Basic Status:"
              - "  Name: {{ vm_name }}"
              - "  Status: {{ target_vmi.resources[0].status.phase }}"
              - "  IP: {{ vm_ip | default('Not Available') }}"
              - "  Node: {{ target_vmi.resources[0].status.nodeName | default('Not Available') }}"

        - name: Add VM to temporary inventory for Oracle status check
          ansible.builtin.add_host:
            name: "{{ vm_name }}"
            ansible_host: "{{ vm_ip }}"
            ansible_user: "{{ oracle_user }}"
            ansible_password: "{{ oracle_admin_password }}"
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            ansible_become: true
            ansible_become_method: sudo
            ansible_become_password: "{{ oracle_admin_password }}"
          when: vm_ip is defined

        - name: Check Oracle Database status on target VM
          delegate_to: "{{ vm_name }}"
          block:
            - name: Check if Oracle Database is installed
              ansible.builtin.shell: |
                rpm -q oracle-database-free-23ai oracle-database-preinstall-23ai
              register: oracle_rpms
              failed_when: false

            - name: Check Oracle home directory
              ansible.builtin.stat:
                path: /opt/oracle/product/23ai/dbhomeFree
              register: oracle_home

            - name: Check Oracle listener status
              ansible.builtin.shell: |
                source /home/oracle/.bash_profile
                lsnrctl status
              become: true
              become_user: oracle
              register: listener_status
              failed_when: false

            - name: Check Oracle Database status
              ansible.builtin.shell: |
                source /home/oracle/.bash_profile
                sqlplus -S / as sysdba <<EOF
                SELECT status FROM v\$instance;
                EXIT;
                EOF
              become: true
              become_user: oracle
              register: database_status
              failed_when: false

            - name: Check Oracle processes
              ansible.builtin.shell: |
                ps -ef | grep -E "(ora_|tnslsnr)" | grep -v grep
              register: oracle_processes
              failed_when: false

            - name: Display comprehensive Oracle status
              ansible.builtin.debug:
                msg:
                  - "üîÆ Oracle Database Status Report"
                  - "=====================================·É©"
                  - "VM Information:"
                  - "  Name: {{ vm_name }}"
                  - "  IP: {{ vm_ip }}"
                  - "  Connection: {{ 'SSH Successful' if ansible_host is defined else 'SSH Failed' }}"
                  - ""
                  - "Oracle RPMs:"
                  - "{{ oracle_rpms.stdout_lines | default(['  Not installed']) | map('regex_replace', '^', '  ') | list | join('\n') }}"
                  - ""
                  - "Oracle Home:"
                  - "  Path: /opt/oracle/product/23ai/dbhomeFree"
                  - "  Exists: {{ 'Yes' if oracle_home.stat.exists else 'No' }}"
                  - ""
                  - "Oracle Listener:"
                  - "  Status: {{ 'Running' if listener_status.rc == 0 else 'Stopped/Error' }}"
                  - "{{ ('  Details: ' + (listener_status.stdout | regex_search('Listener Parameter File.*') | default('Not available'))) if listener_status.rc == 0 else '  Error: ' + (listener_status.stderr | default('Unknown error')) }}"
                  - ""
                  - "Oracle Database:"
                  - "  Status: {{ 'Running' if 'OPEN' in database_status.stdout else 'Stopped/Error' }}"
                  - "{{ ('  Instance Status: ' + (database_status.stdout | regex_search('OPEN|MOUNTED|STARTED') | default('Unknown'))) if database_status.rc == 0 else '  Error: ' + (database_status.stderr | default('Unable to connect')) }}"
                  - ""
                  - "Oracle Processes:"
                  - "{{ (oracle_processes.stdout_lines | default(['  No Oracle processes running']) | map('regex_replace', '^', '  ') | list | join('\n')) if oracle_processes.stdout_lines | length > 0 else '  No Oracle processes running' }}"
                  - ""
                  - "Connection Information:"
                  - "  Database SID: FREE"
                  - "  Connection String: {{ vm_ip }}:1521/FREE"
                  - "  Service Status: {{ 'Available' if (listener_status.rc == 0 and 'OPEN' in database_status.stdout) else 'Unavailable' }}"

          when: vm_ip is defined

      when: target_vmi.resources | length > 0

    - name: Display status for non-existent VM
      ansible.builtin.debug:
        msg:
          - "üîç Oracle VM Status Report"
          - "=============================="
          - "VM {{ vm_name }} not found in namespace {{ kubevirt_namespace }}"
          - "Status: Not Created"
          - "Oracle Database: Not Available"
      when: target_vmi.resources | length == 0
