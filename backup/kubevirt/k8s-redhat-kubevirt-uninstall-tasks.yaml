# KubeVirt Uninstall Tasks (moved from top-level k8s-redhat-kubevirt-uninstall-tasks.yaml)
# Controller remains top-level; do not edit here.

# ===================================================================
# UNINSTALL TASKS - Comprehensive cleanup of KubeVirt and VMs
# ===================================================================
- name: Display uninstall start message
  ansible.builtin.debug:
    msg:
      - "=== Starting comprehensive KubeVirt uninstall ==="
      - "This will remove KubeVirt, all VMs, CDI, and related resources"
      - "WARNING: All virtual machines will be deleted!"

- name: Ensure kubevirt_namespace fact present
  ansible.builtin.set_fact:
    kv_namespace: "{{ kubevirt_namespace | default('kubevirt') }}"

- name: Check if KubeVirt namespace exists
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Namespace
    name: "{{ kv_namespace }}"
  register: kubevirt_namespace_check
  ignore_errors: true

# === VM AND VMI CLEANUP ===
- name: Remove all VMs and VMIs from all namespaces
  ansible.builtin.shell: |
    echo "=== Removing all VMs and VMIs ==="
    kubectl delete vm --all --all-namespaces --timeout=120s --ignore-not-found=true
    kubectl delete vmi --all --all-namespaces --timeout=120s --ignore-not-found=true
    kubectl delete datavolume --all --all-namespaces --timeout=120s --ignore-not-found=true
    echo "VM and VMI cleanup completed"
  ignore_errors: true

- name: Force remove stuck VM finalizers
  ansible.builtin.shell: |
    echo "=== Forcing VM finalizer removal ==="
    for ns in $(kubectl get ns -o jsonpath='{.items[*].metadata.name}'); do
      for resource in vm vmi datavolume; do
        kubectl get $resource -n $ns -o name 2>/dev/null | while read res; do
          if kubectl get $res -n $ns -o jsonpath='{.metadata.deletionTimestamp}' 2>/dev/null | grep -q "T"; then
            echo "Removing finalizers from stuck $res in namespace $ns"
            kubectl patch $res -n $ns --type='merge' -p='{"metadata":{"finalizers":[]}}' 2>/dev/null || true
          fi
        done
      done
    done
    echo "VM finalizer removal completed"
  when: kubevirt_namespace_check is defined
  ignore_errors: true

# === KUBEVIRT CLEANUP ===
- name: Remove existing KubeVirt CustomResource
  kubernetes.core.k8s:
    api_version: kubevirt.io/v1
    kind: KubeVirt
    name: kubevirt
    namespace: "{{ kv_namespace }}"
    state: absent
    wait: true
    wait_timeout: 300
  when: kubevirt_namespace_check.resources | default([]) | length > 0
  ignore_errors: true

- name: Force remove KubeVirt CR finalizers if stuck
  ansible.builtin.shell: >
    if kubectl get kubevirt kubevirt -n {{ kv_namespace }} 2>/dev/null; then
      echo "Removing KubeVirt CR finalizers"
      kubectl patch kubevirt kubevirt -n {{ kv_namespace }} --type='merge' -p='{"metadata":{"finalizers":[]}}' --timeout=30s 2>/dev/null || true
    fi
  when: kubevirt_namespace_check.resources | default([]) | length > 0
  ignore_errors: true

- name: Remove existing KubeVirt Operator
  kubernetes.core.k8s:
    api_version: apps/v1
    kind: Deployment
    name: virt-operator
    namespace: "{{ kv_namespace }}"
    wait: true
  when: kubevirt_namespace_check.resources | default([]) | length > 0
  ignore_errors: true

- name: Force cleanup of stuck KubeVirt components
  ansible.builtin.shell: |
    echo "=== Comprehensive KubeVirt cleanup ==="
    if kubectl get namespace {{ kv_namespace }} 2>/dev/null; then
      kubectl delete daemonset --all -n {{ kv_namespace }} --timeout=60s --ignore-not-found=true
      kubectl delete service --all -n {{ kv_namespace }} --timeout=60s --ignore-not-found=true
      kubectl delete configmap --all -n {{ kv_namespace }} --timeout=60s --ignore-not-found=true
      kubectl delete secret --all -n {{ kv_namespace }} --timeout=60s --ignore-not-found=true
      for resource in kubevirt virtualmachine virtualmachineinstance; do
        kubectl get $resource -n {{ kv_namespace }} -o name 2>/dev/null | while read res; do
          echo "Removing finalizers from $res"
          kubectl patch $res -n {{ kv_namespace }} --type='merge' -p='{"metadata":{"finalizers":[]}}' 2>/dev/null || true
        done
      done
    fi
    echo "KubeVirt component cleanup completed"
  when: kubevirt_namespace_check.resources | default([]) | length > 0
  ignore_errors: true

# === CRD CLEANUP ===
- name: Remove KubeVirt CRDs
  kubernetes.core.k8s:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: "{{ item }}"
    state: absent
    wait: true
    wait_timeout: 120
  loop:
    - virtualmachines.kubevirt.io
    - virtualmachineinstances.kubevirt.io
    - virtualmachineinstancereplicasets.kubevirt.io
    - virtualmachineinstancepresets.kubevirt.io
    - virtualmachineinstancemigrations.kubevirt.io
    - kubevirts.kubevirt.io
  ignore_errors: true

- name: Force remove CRD finalizers if stuck
  ansible.builtin.shell: |
    echo "=== Forcing CRD cleanup ==="
    for crd in virtualmachines.kubevirt.io virtualmachineinstances.kubevirt.io virtualmachineinstancereplicasets.kubevirt.io virtualmachineinstancepresets.kubevirt.io virtualmachineinstancemigrations.kubevirt.io kubevirts.kubevirt.io; do
      if kubectl get crd $crd 2>/dev/null; then
        echo "Removing finalizers from CRD: $crd"
        kubectl patch crd $crd --type='merge' -p='{"metadata":{"finalizers":[]}}' 2>/dev/null || true
      fi
    done
    echo "CRD finalizer removal completed"
  ignore_errors: true

# === RBAC CLEANUP ===
- name: Remove KubeVirt ClusterRoles
  kubernetes.core.k8s:
    api_version: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    name: "{{ item }}"
    state: absent
  loop:
    - kubevirt.io:default
    - kubevirt-operator
    - kubevirt-controller
  ignore_errors: true

- name: Remove KubeVirt ClusterRoleBindings
  kubernetes.core.k8s:
    api_version: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    name: "{{ item }}"
    state: absent
  loop:
    - kubevirt.io:default
    - kubevirt-operator
    - kubevirt-controller
  ignore_errors: true

# === CDI CLEANUP ===
- name: Remove CDI components
  ansible.builtin.shell: |
    kubectl delete cdi --all --all-namespaces --timeout=60s --ignore-not-found=true || true
    kubectl delete cdiconfig --all --all-namespaces --timeout=60s --ignore-not-found=true || true
    kubectl delete datavolume --all --all-namespaces --timeout=60s --ignore-not-found=true || true
  ignore_errors: true

- name: Remove CDI CRDs
  kubernetes.core.k8s:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: "{{ item }}"
    state: absent
    wait: true
    wait_timeout: 120
  loop:
    - datavolumes.cdi.kubevirt.io
    - dataimportcrons.cdi.kubevirt.io
    - datasources.cdi.kubevirt.io
    - cdis.cdi.kubevirt.io
    - cdiconfigs.cdi.kubevirt.io
    - storageprofiles.cdi.kubevirt.io
    - volumeclonepolicies.cdi.kubevirt.io
    - volumeimportsources.cdi.kubevirt.io
    - volumeuploadsources.cdi.kubevirt.io
    - objecttransfers.cdi.kubevirt.io
  ignore_errors: true

- name: Remove CDI ClusterRoles and ClusterRoleBindings
  ansible.builtin.shell: |
    kubectl delete clusterrole -l cdi.kubevirt.io --ignore-not-found=true || true
    kubectl delete clusterrolebinding -l cdi.kubevirt.io --ignore-not-found=true || true
    kubectl delete clusterrole cdi-operator cdi-controller cdi-apiserver --ignore-not-found=true || true
    kubectl delete clusterrolebinding cdi-operator cdi-controller cdi-apiserver --ignore-not-found=true || true
  ignore_errors: true

# === NAMESPACE CLEANUP ===
- name: Delete KubeVirt namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ kv_namespace }}"
    state: absent
    wait: true
    wait_timeout: 180
  when: kubevirt_namespace_check.resources | default([]) | length > 0
  ignore_errors: true

- name: Delete CDI namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ cdi_namespace | default('cdi') }}"
    state: absent
    wait: true
    wait_timeout: 120
  ignore_errors: true

# === LOCAL STORAGE CLEANUP ===
- name: Clean up VM-related local storage
  ansible.builtin.shell: |
    echo "=== Cleaning up VM-related storage ==="
    kubectl delete pvc -l app=win2019server --all-namespaces --timeout=60s --ignore-not-found=true
    kubectl delete pv -l app=win2019server --timeout=60s --ignore-not-found=true
    kubectl delete pvc -l app=centos-vm --all-namespaces --timeout=60s --ignore-not-found=true
    kubectl delete pv -l app=centos-vm --timeout=60s --ignore-not-found=true
    remaining_pvs=$(kubectl get pv --no-headers 2>/dev/null | grep local-storage | wc -l || echo "0")
    if [ "$remaining_pvs" -eq 0 ]; then
      kubectl delete storageclass local-storage --ignore-not-found=true
      echo "Local storage class removed"
    else
      echo "Local storage class retained ($remaining_pvs PVs still using it)"
    fi
    echo "VM storage cleanup completed"
  ignore_errors: true

- name: Remove virtctl binary
  ansible.builtin.file:
    path: /usr/local/bin/virtctl
    state: absent
  ignore_errors: true

- name: Verify uninstall completion
  ansible.builtin.shell: |
    echo "=== Verifying uninstall completion ==="
    kv_ns=$(kubectl get namespace {{ kv_namespace }} 2>/dev/null | wc -l)
    cdi_ns=$(kubectl get namespace {{ cdi_namespace | default('cdi') }} 2>/dev/null | wc -l)
    if [ "$kv_ns" -eq 0 ] && [ "$cdi_ns" -eq 0 ]; then
      echo "✓ KubeVirt and CDI namespaces removed"
    else
      echo "⚠ Some namespaces still exist"
    fi
    remaining_crds=$(kubectl get crd 2>/dev/null | grep -E "(kubevirt|cdi)" | wc -l)
    if [ "$remaining_crds" -eq 0 ]; then
      echo "✓ All KubeVirt/CDI CRDs removed"
    else
      echo "⚠ Found $remaining_crds remaining CRDs"
    fi
    remaining_vms=$(kubectl get vm --all-namespaces --no-headers 2>/dev/null | wc -l)
    if [ "$remaining_vms" -eq 0 ]; then
      echo "✓ All VMs removed"
    else
      echo "⚠ Found $remaining_vms remaining VMs"
    fi
    if command -v virtctl >/dev/null 2>/dev/null; then
      echo "⚠ virtctl binary still exists"
    else
      echo "✓ virtctl binary removed"
    fi
    echo "=== Uninstall verification completed ==="
  register: uninstall_verification
  ignore_errors: true

- name: Display uninstall results
  ansible.builtin.debug:
    msg: "{{ uninstall_verification.stdout_lines | default([]) }}"
