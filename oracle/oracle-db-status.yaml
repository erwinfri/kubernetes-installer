---

- name: Oracle VM Status
  hosts: localhost
  gather_facts: no
  vars:
    vm_name: "oracle-vm"
    kind: "VirtualMachine"
    kubevirt_namespace: "default"
    oracle_vault_secret: "secret/data/oracle-vm/admin"
    oracle_user: "oracle"
    oracle_password: "Oracle123"
    oracle_admin_password: "Oracle123"
    # Oracle environment variables - consolidated for reuse  
    oracle_env:
      ORACLE_HOME: /opt/oracle/product/23ai/dbhomeFree
      ORACLE_SID: FREE
      ORACLE_BASE: /opt/oracle
      TNS_ADMIN: /opt/oracle/product/23ai/dbhomeFree/network/admin
      PATH: "/opt/oracle/product/23ai/dbhomeFree/bin:/usr/local/bin:/usr/bin:/bin:/sbin"
    oracle_pdb_name: FREEPDB1
    oracle_listener_port: 1521
    oracle_app_username: appuser

  pre_tasks:
    - name: Install required packages for Oracle status operations
      ansible.builtin.dnf:
        name:
          - sshpass
        state: present
      become: true

    - name: Find port-forward script location
      ansible.builtin.find:
        paths:
          - "{{ playbook_dir }}/library"
          - "{{ playbook_dir }}/../library"
        patterns: "start_portforward.sh"
        file_type: file
      register: portforward_script_search

    - name: Set port-forward script path
      ansible.builtin.set_fact:
        portforward_script_path: "{{ portforward_script_search.files[0].path }}"
      when: portforward_script_search.files | length > 0

    - name: Fail if port-forward script not found
      ansible.builtin.fail:
        msg: "Port-forward script not found in expected locations"
      when: portforward_script_search.files | length == 0

    - name: Port-forward Vault service for local access
      ansible.builtin.shell: |
        {{ portforward_script_path }} vault 8200 default /tmp/vault-portforward.log /tmp/vault-portforward.pid
        sleep 5
      async: 10
      poll: 0
      register: port_forward_job

    - name: Show Vault port-forward log for troubleshooting
      ansible.builtin.shell: cat /tmp/vault-portforward.log || true
      register: vault_portforward_log
      changed_when: false
      ignore_errors: true
      tags: always

    - name: Display Vault port-forward log output
      ansible.builtin.debug:
        var: vault_portforward_log.stdout
      tags: always

    - name: Wait for Vault API to be reachable on localhost:8200
      ansible.builtin.wait_for:
        host: localhost
        port: 8200
        delay: 2
        timeout: 30
        state: started
      tags: always

    # Set Vault environment variables for all Vault operations and CLI login
    - name: Set Vault environment variables for Ansible and CLI
      ansible.builtin.set_fact:
        vault_env:
          VAULT_ADDR: "http://localhost:8200"
          VAULT_TOKEN: "{{ lookup('pipe', 'jq -r .root_token /root/vault-init.json') }}"
        vault_addr: "http://localhost:8200"
        vault_token: "{{ lookup('pipe', 'jq -r .root_token /root/vault-init.json') }}"
      tags: always

    # Read Oracle admin password from Vault
    - name: Read Oracle admin password from Vault
      ansible.builtin.shell: |
        vault read -field=password {{ oracle_vault_secret }}
      environment: "{{ vault_env }}"
      register: vault_oracle_pw
      changed_when: false
      failed_when: false

    - name: Set oracle_admin_password from Vault (if available)
      ansible.builtin.set_fact:
        oracle_admin_password: "{{ vault_oracle_pw.stdout | trim }}"
      when: vault_oracle_pw.rc == 0 and vault_oracle_pw.stdout | trim | length > 0

  tasks:
    - name: Set actual runtime parameters (command line takes precedence)
      ansible.builtin.set_fact:
        runtime_vm_name: "{{ vm_name }}"
        runtime_kind: "{{ kind }}"
        runtime_kubevirt_namespace: "{{ kubevirt_namespace }}"
        runtime_oracle_vault_secret: "{{ oracle_vault_secret }}"
        runtime_oracle_user: "{{ oracle_user }}"
        runtime_oracle_password: "{{ oracle_password }}"
        runtime_oracle_admin_password: "{{ oracle_admin_password }}"

    - name: Display Oracle VM status check information
      ansible.builtin.debug:
        msg:
          - "🔍 Oracle VM Status Check"
          - "VM Name: {{ runtime_vm_name }}"
          - "Namespace: {{ runtime_kubevirt_namespace }}"
          - "Oracle User: {{ runtime_oracle_user }}"
          - "Vault Secret Path: {{ runtime_oracle_vault_secret }}"

    - name: Check if target VM exists and is running
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ runtime_vm_name }}"
        namespace: "{{ runtime_kubevirt_namespace }}"
      register: target_vmi

    - name: Get Oracle VM status
      block:
        - name: Get VM IP address
          ansible.builtin.set_fact:
            vm_ip: "{{ target_vmi.resources[0].status.interfaces[0].ipAddress }}"
          when: target_vmi.resources | length > 0 and target_vmi.resources[0].status.interfaces is defined

        - name: Display VM basic information
          ansible.builtin.debug:
            msg:
              - "VM Basic Status:"
              - "  Name: {{ runtime_vm_name }}"
              - "  Status: {{ target_vmi.resources[0].status.phase }}"
              - "  IP: {{ vm_ip | default('Not Available') }}"
              - "  Node: {{ target_vmi.resources[0].status.nodeName | default('Not Available') }}"

        - name: Add VM host key to known_hosts
          ansible.builtin.command:
            cmd: "ssh-keyscan -H {{ vm_ip }} >> ~/.ssh/known_hosts"
          when: vm_ip is defined
          ignore_errors: true

        - name: Add VM to temporary inventory for Oracle status check
          ansible.builtin.add_host:
            name: "{{ runtime_vm_name }}"
            ansible_host: "{{ vm_ip }}"
            ansible_user: "redhat"
            ansible_password: "redhat"
            ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
            ansible_become: true
            ansible_become_method: sudo
            ansible_become_password: "redhat"
          when: vm_ip is defined

        - name: Check Oracle Database status on target VM
          delegate_to: "{{ vm_name }}"
          block:
            - name: Check if Oracle Database is installed
              ansible.builtin.shell: |
                rpm -q oracle-database-free-23ai oracle-database-preinstall-23ai
              register: oracle_rpms
              failed_when: false

            - name: Check Oracle home directory
              ansible.builtin.stat:
                path: /opt/oracle/product/23ai/dbhomeFree
              register: oracle_home

            - name: Check Oracle listener status
              ansible.builtin.shell: |
                export ORACLE_HOME={{ oracle_env.ORACLE_HOME }}
                export PATH={{ oracle_env.ORACLE_HOME }}/bin:$PATH
                export TNS_ADMIN={{ oracle_env.TNS_ADMIN }}
                lsnrctl status
              become: true
              become_user: oracle
              register: listener_status
              failed_when: false

            - name: Check Oracle Database status (CDB)
              ansible.builtin.shell: |
                export ORACLE_HOME={{ oracle_env.ORACLE_HOME }}
                export ORACLE_SID={{ oracle_env.ORACLE_SID }}
                export PATH={{ oracle_env.ORACLE_HOME }}/bin:$PATH
                echo "SELECT 'Database Status: ONLINE' as STATUS, instance_name, status, database_status FROM v\$instance;" | sqlplus -S sys/"{{ oracle_admin_password }}"@localhost:{{ oracle_listener_port }}/{{ oracle_env.ORACLE_SID }} as sysdba
              become: true
              become_user: oracle
              register: db_status
              failed_when: false

            - name: Check Oracle service status
              ansible.builtin.systemd:
                name: oracle-free-23ai
              register: oracle_service
              become: true
              failed_when: false

            - name: Check database connectivity test (PDB)
              ansible.builtin.shell: |
                export ORACLE_HOME={{ oracle_env.ORACLE_HOME }}
                export ORACLE_SID={{ oracle_env.ORACLE_SID }}
                export PATH={{ oracle_env.ORACLE_HOME }}/bin:$PATH
                echo "SELECT 'Connection Test: SUCCESSFUL' as TEST_RESULT FROM dual;" | sqlplus -S {{ oracle_app_username }}/"{{ oracle_admin_password }}"@localhost:{{ oracle_listener_port }}/{{ oracle_pdb_name }}
              become: true
              become_user: oracle
              register: connectivity_test
              failed_when: false

            - name: Get Oracle tablespace information (CDB root)
              ansible.builtin.shell: |
                export ORACLE_HOME={{ oracle_env.ORACLE_HOME }}
                export ORACLE_SID={{ oracle_env.ORACLE_SID }}
                export PATH={{ oracle_env.ORACLE_HOME }}/bin:$PATH
                echo "SELECT tablespace_name, ROUND(bytes/1024/1024,2) as MB_SIZE, ROUND(maxbytes/1024/1024,2) as MB_MAX FROM dba_data_files ORDER BY tablespace_name;" | sqlplus -S sys/"{{ oracle_admin_password }}"@localhost:{{ oracle_listener_port }}/{{ oracle_env.ORACLE_SID }} as sysdba
              become: true
              become_user: oracle
              register: tablespace_info
              failed_when: false

            - name: Check Oracle processes
              ansible.builtin.shell: |
                ps -ef | grep -E "(ora_|tnslsnr)" | grep -v grep
              register: oracle_processes
              failed_when: false

            - name: Display comprehensive Oracle 23ai status
              ansible.builtin.debug:
                msg:
                  - "🔮 Oracle 23ai Free Edition Status Report"
                  - "=========================================="
                  - "VM Information:"
                  - "  Name: {{ vm_name }}"
                  - "  IP: {{ vm_ip }}"
                  - "  Connection: {{ 'SSH Successful' if ansible_host is defined else 'SSH Failed' }}"
                  - ""
                  - "📦 Oracle Installation:"
                  - "{{ oracle_rpms.stdout_lines | default(['  Oracle RPM not installed']) | map('regex_replace', '^', '  ✅ ') | list | join('\n') }}"
                  - ""
                  - "🏠 Oracle Home:"
                  - "  Path: /opt/oracle/product/23ai/dbhomeFree"
                  - "  Status: {{ '✅ Exists' if oracle_home.stat.exists else '❌ Missing' }}"
                  - ""
                  - "🔊 Oracle Listener:"
                  - "  Status: {{ '✅ Running' if listener_status.rc == 0 and 'READY' in listener_status.stdout else '❌ Stopped/Error' }}"
                  - "  Port: {{ (oracle_listener_port ~ ' (Active)') if (listener_status.rc == 0 and (oracle_listener_port | string) in (listener_status.stdout | default(''))) else 'Not Available' }}"
                  - ""
                  - "🗃️  Oracle Database ({{ oracle_env.ORACLE_SID }} / {{ oracle_pdb_name }}):"
                  - "  Service Status: {{ '✅ Active' if oracle_service.status.ActiveState == 'active' else '❌ Inactive' }}"
                  - "  Database Status: {{ '✅ Online' if db_status.rc == 0 and 'ONLINE' in db_status.stdout else '❌ Offline/Error' }}"
                  - "  SID: {{ oracle_env.ORACLE_SID }}"
                  - "  Connection Test: {{ '✅ Successful' if connectivity_test.rc == 0 and 'SUCCESSFUL' in connectivity_test.stdout else '❌ Failed' }}"
                  - ""
                  - "💾 Tablespace Information:"
                  - "{{ tablespace_info.stdout_lines[2:] | default(['  Unable to retrieve tablespace info']) | map('regex_replace', '^', '  ') | list | join('\n') if tablespace_info.rc == 0 else '  ❌ Unable to retrieve tablespace information' }}"
                  - ""
                  - "🔐 Authentication:"
                  - "  SYS/SYSTEM Password: {{ '✅ Configured' if db_status.rc == 0 else '❌ Issue' }}"
                  - "  Application User ({{ oracle_app_username }}): {{ '✅ Available' if connectivity_test.rc == 0 else '❌ Issue' }}"
                  - ""
                  - "🌐 Connection Information:"
                  - "  TNS (CDB): {{ vm_ip }}:{{ oracle_listener_port }}/{{ oracle_env.ORACLE_SID }}"
                  - "  TNS (PDB): {{ vm_ip }}:{{ oracle_listener_port }}/{{ oracle_pdb_name }}"
                  - "  Status: {{ '🟢 Ready' if (listener_status.rc == 0 and db_status.rc == 0) else '🔴 Not Ready' }}"
                  - ""
                  - "💻 Shell Connection Commands:"
                  - "  ┌─ Environment Setup (copy & paste) ─"
                  - "  │ export ORACLE_HOME={{ oracle_env.ORACLE_HOME }}"
                  - "  │ export ORACLE_SID={{ oracle_env.ORACLE_SID }}"
                  - "  │ export ORACLE_BASE={{ oracle_env.ORACLE_BASE }}"
                  - "  │ export TNS_ADMIN={{ oracle_env.TNS_ADMIN }}"
                  - "  │ export PATH={{ oracle_env.ORACLE_HOME }}/bin:$PATH"
                  - "  │ export LD_LIBRARY_PATH={{ oracle_env.ORACLE_HOME }}/lib:$LD_LIBRARY_PATH"
                  - "  └─────────────────────────────────────"
                  - ""
                  - "  ┌─ Connect as SYSDBA (Local) ─"
                  - "  │ sqlplus / as sysdba"
                  - "  │ sqlplus sys/{{ oracle_admin_password }} as sysdba"
                  - "  └─────────────────────────────"
                  - ""
                  - "  ┌─ Connect as SYSDBA (Remote) ─"
                  - "  │ sqlplus sys/{{ oracle_admin_password }}@{{ vm_ip }}:{{ oracle_listener_port }}/{{ oracle_env.ORACLE_SID }} as sysdba"
                  - "  │ sqlplus sys/{{ oracle_admin_password }}@{{ oracle_env.ORACLE_SID }} as sysdba"
                  - "  └─────────────────────────────────"
                  - ""
                  - "  ┌─ Connect as Application User ─"
                  - "  │ sqlplus {{ oracle_app_username }}/{{ oracle_admin_password }}@{{ vm_ip }}:{{ oracle_listener_port }}/{{ oracle_pdb_name }}"
                  - "  │ sqlplus {{ oracle_app_username }}/{{ oracle_admin_password }}@{{ oracle_pdb_name }}"
                  - "  └───────────────────────────────────"
                  - ""
                  - "  ┌─ Quick Database Status Check ─"
                  - "  │ lsnrctl status"
                  - "  │ echo 'SELECT instance_name, status FROM v$instance;' | sqlplus -S / as sysdba"
                  - "  │ echo 'SELECT name, open_mode FROM v$database;' | sqlplus -S / as sysdba"
                  - "  │ echo 'SELECT tablespace_name, status FROM dba_tablespaces;' | sqlplus -S / as sysdba"
                  - "  └───────────────────────────────────"
                  - ""
                  - "  ┌─ Service Management Commands ─"
                  - "  │ sudo systemctl status oracle-free-23ai"
                  - "  │ sudo systemctl start oracle-free-23ai"
                  - "  │ sudo systemctl stop oracle-free-23ai"
                  - "  │ sudo systemctl restart oracle-free-23ai"
                  - "  └─────────────────────────────────"
                  - ""
                  - "  ┌─ Complete Connection Script ─"
                  - "  │ #!/bin/bash"
                  - "  │ # Oracle 23ai Free Edition Connection Script"
                  - "  │ export ORACLE_HOME={{ oracle_env.ORACLE_HOME }}"
                  - "  │ export ORACLE_SID={{ oracle_env.ORACLE_SID }}"
                  - "  │ export ORACLE_BASE={{ oracle_env.ORACLE_BASE }}"
                  - "  │ export TNS_ADMIN={{ oracle_env.TNS_ADMIN }}"
                  - "  │ export PATH={{ oracle_env.ORACLE_HOME }}/bin:$PATH"
                  - "  │ export LD_LIBRARY_PATH={{ oracle_env.ORACLE_HOME }}/lib:$LD_LIBRARY_PATH"
                  - "  │ "
                  - "  │ echo 'Oracle 23ai Environment Ready!'"
                  - "  │ echo 'Database: {{ oracle_env.ORACLE_SID }} on {{ vm_ip }}:{{ oracle_listener_port }}'"
                  - "  │ echo 'Connect: sqlplus / as sysdba'"
                  - "  │ "
                  - "  │ # Optional: Auto-connect to database"
                  - "  │ # sqlplus / as sysdba"
                  - "  └─────────────────────────────────────"
                  - ""
                  - ""
                  - "⚡ Quick Start (minimal commands):"
                  - "  SSH to VM: ssh {{ oracle_user }}@{{ vm_ip }}"
                  - "  Set env:   source /home/oracle/.bash_profile"
                  - "  Connect:   sqlplus / as sysdba"
                  - "  Or:        sqlplus sys/{{ oracle_admin_password }}@localhost:{{ oracle_listener_port }}/{{ oracle_env.ORACLE_SID }} as sysdba"
                  - ""
                  - "📊 Overall Health: {{ '🟢 HEALTHY' if (oracle_home.stat.exists and listener_status.rc == 0 and db_status.rc == 0 and oracle_service.status.ActiveState == 'active') else '🔴 ISSUES DETECTED' }}"

          when: vm_ip is defined

      when: target_vmi.resources | length > 0

    - name: Display status for non-existent VM
      ansible.builtin.debug:
        msg:
          - "🔍 Oracle 23ai Free Edition Status Report"
          - "========================================"
          - "VM {{ vm_name }} not found in namespace {{ kubevirt_namespace }}"
          - "Status: ❌ Not Created"
          - "Oracle Database: ❌ Not Available"
      when: target_vmi.resources | length == 0
