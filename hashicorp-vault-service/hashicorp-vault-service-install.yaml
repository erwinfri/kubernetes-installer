
# Install HashiCorp Vault via Helm (single-node, dev/test)
- name: Install Helm if not present
  ansible.builtin.shell: |
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  args:
    creates: /usr/local/bin/helm
  become: true

- name: Add HashiCorp Helm repo
  ansible.builtin.shell: helm repo add hashicorp https://helm.releases.hashicorp.com
  changed_when: false

- name: Update Helm repos
  ansible.builtin.shell: helm repo update
  changed_when: false

- name: Create default namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ vault_namespace }}"
    state: present

# Install local-path-provisioner for persistent storage (if not present)
- name: Check if local-path-provisioner is installed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    namespace: local-path-storage
    name: local-path-provisioner
  register: lpp_deploy
  failed_when: false

- name: Install local-path-provisioner if not present
  ansible.builtin.shell: |
    kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.26/deploy/local-path-storage.yaml
  when: lpp_deploy.resources | length == 0
  changed_when: true

# Write values.yaml for Vault (persistent mode only)
- name: Write values.yaml for Vault (persistent mode)
  copy:
    dest: /tmp/vault-values.yaml
    content: |
      server:
        image:
          repository: hashicorp/vault
          tag: "1.15.2"
        ha:
          enabled: false
        dataStorage:
          enabled: true
          size: 2Gi
          storageClass: local-path
        dev:
          enabled: false
        extraEnvironmentVars:
          VAULT_LOG_LEVEL: debug
      ui:
        enabled: true
      service:
        type: ClusterIP

- name: Install or upgrade Vault via Helm (persistent mode)
  ansible.builtin.shell: |
    helm upgrade --install vault hashicorp/vault --namespace {{ vault_namespace }} -f /tmp/vault-values.yaml
  register: vault_helm_install
  changed_when: vault_helm_install.rc == 0

- name: Wait for Vault pod to be running (not ready)
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ vault_namespace }}"
    label_selectors:
      - "app.kubernetes.io/name=vault"
    wait: true
    wait_condition:
      type: PodScheduled
      status: "True"
    wait_timeout: 300


- name: Port-forward Vault service for initialization
  ansible.builtin.shell: |
    ./library/start_portforward.sh vault 8200 {{ vault_namespace }} /tmp/vault-portforward.log /tmp/vault-portforward.pid
    sleep 5
  async: 10
  poll: 0
  register: port_forward_job

- name: Initialize Vault
  ansible.builtin.shell: |
    rm -f /root/vault-init.json
    export VAULT_ADDR=http://localhost:8200
    vault operator init -key-shares=1 -key-threshold=1 -format=json > /root/vault-init.json
  environment:
    VAULT_ADDR: http://localhost:8200
  register: vault_init
  until: vault_init.rc == 0
  retries: 10
  delay: 5

- name: Unseal Vault
  ansible.builtin.shell: |
    export VAULT_ADDR=http://localhost:8200
    vault operator unseal $(jq -r '.unseal_keys_b64[0]' /root/vault-init.json)
  environment:
    VAULT_ADDR: http://localhost:8200
  register: vault_unseal
  until: vault_unseal.rc == 0
  retries: 5
  delay: 3

- name: Wait for Vault pod to be ready (after unseal)
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ vault_namespace }}"
    label_selectors:
      - "app.kubernetes.io/name=vault"
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 120

- name: Create /root/.vault-token from root token
  ansible.builtin.shell: |
    jq -r '.root_token' /root/vault-init.json > /root/.vault-token
    chmod 600 /root/.vault-token
  become: true

# (No longer needed: vault-init.json is created directly in /root)

- name: Show Vault usage instructions
  debug:
    msg:
      - "Vault is initialized and unsealed (persistent mode, file storage)."
      - "Root token is in /root/vault-init.json (key: .root_token)."
      - "To port-forward for local access:"
      - "  ./library/start_portforward.sh vault 8200 {{ vault_namespace }} /tmp/vault-portforward.log /tmp/vault-portforward.pid"
      - "To use the Vault CLI as root user, run:"
      - "  export VAULT_TOKEN=$(jq -r '.root_token' /root/vault-init.json)"
      - "  export VAULT_ADDR=http://vault.default.svc.cluster.local:8200"
      - "  export VAULT_ADDR=http://localhost:8200"
      - "  vault status"
      - "  vault login"
      - "UI: http://vault.default.svc.cluster.local:8200/ui"