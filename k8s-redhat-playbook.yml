---
#
# Playbook to install Kubernetes on Red Hat 9
# Red Hat Version: 9
# Kubernetes Version: 1.33.0
#
# System Preparation:
#
# Disables swap, configures SELinux, and loads kernel modules.
# Configures sysctl parameters for Kubernetes networking.
# Kubernetes Installation:
#
# Adds the Kubernetes repository and installs kubelet, kubeadm, and kubectl.
# Installs and configures containerd as the container runtime.
# Cluster Initialization:
#
# Initializes the Kubernetes cluster using kubeadm init.
# Configures kubeconfig for both root and the invoking user.
# Flannel CNI Installation:
#
# Installs Flannel for pod networking.
# Waits for Flannel DaemonSet and pods to be ready.
# Cluster Verification:
#
# Verifies the status of nodes and pods.
# Removes taints from the control-plane node to allow workloads.


- name: Install Kubernetes on Red Hat 9
  hosts: localhost
  become: yes

  vars_prompt:
    - name: "k8s_hostname"
      prompt: "Enter the hostname for this Kubernetes node"
      private: no
      default: "k8s.modernhackers.com"

  tasks:
    
    # Set hostname to user input or default value
    - name: Set hostname
      ansible.builtin.hostname:
        name: "{{ k8s_hostname }}"
    
    # Disable swap
    - name: Disable swap
      ansible.builtin.command:
        cmd: swapoff -a

    - name: Comment out swap entry in /etc/fstab
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: '^\s*([^#]*\s+swap\s+.*)$'
        line: '# \1'
        state: present

    # Configure SELinux
    - name: Set SELinux to permissive mode
      ansible.builtin.command:
        cmd: setenforce 0

    - name: Update SELinux configuration to permissive
      ansible.builtin.replace:
        path: /etc/selinux/config
        regexp: '^SELINUX=enforcing'
        replace: 'SELINUX=permissive'

    # Load br_netfilter kernel module
    - name: Load br_netfilter kernel module
      ansible.builtin.shell:
        cmd: modprobe br_netfilter

    - name: Persist br_netfilter kernel module
      ansible.builtin.copy:
        dest: /etc/modules-load.d/k8s.conf
        content: |
          br_netfilter

    # Configure sysctl parameters for Kubernetes networking
    - name: Configure sysctl parameters for Kubernetes networking
      ansible.builtin.copy:
        dest: /etc/sysctl.d/k8s.conf
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1

    - name: Apply sysctl parameters
      ansible.builtin.command:
        cmd: sysctl --system

    # Add Kubernetes repository
    - name: Add Kubernetes repository
      ansible.builtin.copy:
        dest: /etc/yum.repos.d/kubernetes.repo
        content: |
          [kubernetes]
          name=Kubernetes
          baseurl=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/
          enabled=1
          gpgcheck=1
          gpgkey=https://pkgs.k8s.io/core:/stable:/v1.33/rpm/repodata/repomd.xml.key
          exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni

    # Install Kubernetes components
    - name: Install Kubernetes components
      ansible.builtin.yum:
        name:
          - kubelet-1.33.0
          - kubeadm-1.33.0
          - kubectl-1.33.0
        state: present
        disable_excludes: kubernetes

    # Enable and start kubelet
    - name: Enable and start kubelet
      ansible.builtin.systemd:
        name: kubelet
        enabled: true
        state: started

    # Install containerd
    - name: Install required packages for containerd
      ansible.builtin.yum:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    - name: Add Docker repository
      ansible.builtin.command:
        cmd: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Install containerd
      ansible.builtin.yum:
        name: containerd.io
        state: present

    - name: Configure containerd
      ansible.builtin.shell:
        cmd: containerd config default > /etc/containerd/config.toml

    - name: Enable SystemdCgroup in containerd
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'

    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: true

    # Clean up previous Kubernetes installation
    - name: Reset Kubernetes cluster
      ansible.builtin.command:
        cmd: kubeadm reset -f
      ignore_errors: true

    - name: Remove leftover Kubernetes configuration
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/etcd

    # Open required firewall ports
    - name: Open firewall ports for Kubernetes
      ansible.builtin.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
      loop:
        - 6443/tcp
        - 10250/tcp
        - 2379-2380/tcp
        - 8472/udp
        - 4789/udp

    - name: Reload firewalld
      ansible.builtin.command:
        cmd: firewall-cmd --reload

    # Initialize Kubernetes cluster
    - name: Initialize Kubernetes cluster
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version v1.33.0
      register: kubeadm_output

    # Set up kubeconfig for root user
    - name: Set up kubeconfig for root user
      ansible.builtin.file:
        path: /root/.kube
        state: directory
        mode: '0700'

    - name: Copy admin.conf to kubeconfig
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        mode: '0600'

    # Verify kubelet service is running
    - name: Verify kubelet service is running
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true

    # Verify Kubernetes API server is running
    - name: Verify Kubernetes API server is running
      ansible.builtin.command:
        cmd: kubectl cluster-info
      register: api_server_status
      retries: 5
      delay: 10
      until: api_server_status.rc == 0

    # Install Flannel CNI plugin
    - name: Install Flannel CNI plugin
      ansible.builtin.shell:
        cmd: |
          curl -O https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
          sed -i 's/namespace: kube-flannel/namespace: kube-system/g' kube-flannel.yml
          kubectl apply -f kube-flannel.yml

    # Wait for Flannel DaemonSet to be created
    - name: Wait for Flannel DaemonSet to be created
      ansible.builtin.command:
        cmd: kubectl get daemonset -n kube-system -l app=flannel
      register: flannel_daemonset_status
      retries: 5
      delay: 30
      until: flannel_daemonset_status.rc == 0
      ignore_errors: true

    # Wait for Flannel pods to be ready
    - name: Wait for Flannel pods to be ready
      ansible.builtin.command:
        cmd: kubectl wait --for=condition=ready pod -l app=flannel -n kube-system --timeout=120s
      register: flannel_status
      retries: 5
      delay: 30
      ignore_errors: true

    # Debug Flannel DaemonSet
    - name: Debug Flannel DaemonSet
      ansible.builtin.command:
        cmd: kubectl get daemonset -n kube-system -l app=flannel
      register: flannel_daemonset_debug
      ignore_errors: true

    - name: Print Flannel DaemonSet status
      ansible.builtin.debug:
        var: flannel_daemonset_debug.stdout

    # Fetch Flannel pod logs for debugging
    - name: Fetch Flannel pod logs
      ansible.builtin.shell:
        cmd: kubectl logs -n kube-system -l app=flannel
      register: flannel_logs
      ignore_errors: true

    - name: Print Flannel pod logs
      ansible.builtin.debug:
        var: flannel_logs.stdout

    # Allow control-plane node to run workloads
    - name: Allow control-plane node to run workloads
      ansible.builtin.command:
        cmd: kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      ignore_errors: true

    # Wait for Kubernetes node to become Ready
    - name: Wait for Kubernetes node to become Ready
      ansible.builtin.command:
        cmd: kubectl get nodes --no-headers
      register: node_ready
      retries: 10
      delay: 10
      until: "' Ready' in node_ready.stdout"

    # Debug Kubernetes node status
    - name: Debug Kubernetes node status
      ansible.builtin.command:
        cmd: kubectl get nodes -o wide
      register: node_status
      ignore_errors: true

    - name: Debug Kubernetes pod status
      ansible.builtin.command:
        cmd: kubectl get pods -n kube-system -o wide
      register: pod_status
      ignore_errors: true
    
    #- name: Print node status
    #  ansible.builtin.debug:
    #    var: node_status.stdout

    #- name: Print pod status
    #  ansible.builtin.debug:
    #    var: pod_status.stdout
    
    # Set up kubeconfig for the current user
    - name: Set up kubeconfig for the current user
      ansible.builtin.shell:
        cmd: |
          mkdir -p ~{{ ansible_env.SUDO_USER }}/.kube
          cp /etc/kubernetes/admin.conf ~{{ ansible_env.SUDO_USER }}/.kube/config
          chown {{ ansible_env.SUDO_UID }}:{{ ansible_env.SUDO_GID }} ~{{ ansible_env.SUDO_USER }}/.kube/config
      when: ansible_env.SUDO_USER is defined
  