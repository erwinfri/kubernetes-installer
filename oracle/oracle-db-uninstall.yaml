---
- name: Oracle Uninstall
  hosts: localhost
  gather_facts: false
  vars:
    vm_name: "oracle-vm"  # override with -e vm_name=... if needed
    kubevirt_namespace: "default"  # override with -e kubevirt_namespace=...
    # Set true to target localhost uninstall; false for VM uninstall
    oracle_local_uninstall: false
    oracle_user: "oracle"  # override with -e oracle_user=...
    oracle_admin_password: "Oracle123"  # override with -e oracle_admin_password=...
    oracle_force_remove_user: true
    oracle_force_remove_groups: true
    oracle_directories:
      - /opt/oracle
      - /u01/app/oracle
      - /u01/app/oraInventory
      - /var/opt/oracle
      - /home/oracle/app
    oracle_misc_files:
      - /etc/oratab
      - /etc/oraInst.loc
      - /etc/sysconfig/oracle-free-23ai.conf
    oracle_temp_files:
      - /tmp/oracle-database-preinstall-23ai-1.0-2.el9.x86_64.rpm
      - /tmp/oracle-database-free-23ai-23.9-1.el9.x86_64.rpm
      - /tmp/oracle-config-raw.log
      - /tmp/oracle-config.tailpos
      - /tmp/oracle-config.pid
    # Whether to remove generic /tmp oracle-related large log artifacts
    oracle_clean_tmp_oracle_logs: true
    # Glob patterns (evaluated on target) to purge when oracle_clean_tmp_oracle_logs is true
    oracle_tmp_oracle_patterns:
      - /tmp/oracle-*
      - /tmp/oracle_*
      - /tmp/*oracle*log*
      - /tmp/oracle-install-logs

  tasks:
    - name: Local uninstall block
      when: oracle_local_uninstall | bool
      block:
         - name: Stop oracle-free-23ai service if present
           ansible.builtin.systemd:
             name: oracle-free-23ai
             state: stopped
             enabled: false
           become: true
           failed_when: false

         - name: Discover oracle-related services (local)
           ansible.builtin.shell: |
             systemctl list-units --type=service --all | awk '/oracle/ {print $1}' | sort -u
           register: local_oracle_services
           changed_when: false
           failed_when: false
           become: true

         - name: Stop oracle-related services (local)
           ansible.builtin.systemd:
             name: "{{ item }}"
             state: stopped
             enabled: false
           loop: "{{ local_oracle_services.stdout_lines | default([]) }}"
           when: local_oracle_services.stdout_lines | default([]) | length > 0
           become: true
           failed_when: false

         - name: Graceful DB shutdown (local)
           ansible.builtin.shell: |
             if id oracle &>/dev/null; then
               sudo -u oracle bash -lc 'if [ -f /home/oracle/.bash_profile ]; then source /home/oracle/.bash_profile; fi; printf "SHUTDOWN IMMEDIATE;\nEXIT;\n" | sqlplus / as sysdba || true'
             fi
           become: true
           failed_when: false
           register: local_shutdown

         - name: Stop listener (local)
           ansible.builtin.shell: |
             if id oracle &>/dev/null; then
               sudo -u oracle bash -lc 'if [ -f /home/oracle/.bash_profile ]; then source /home/oracle/.bash_profile; fi; lsnrctl stop || true'
             fi
           become: true
           failed_when: false

         - name: Kill leftover Oracle processes (local)
           ansible.builtin.shell: |
             PIDS=$(ps -eo pid,cmd | grep -E '(pmon|ora_|tnslsnr|db_)' | grep -v grep | awk '{print $1}' | sort -u || true)
             if [ -n "$PIDS" ]; then kill -9 $PIDS || true; sleep 2; fi
             REMAIN=$(ps -eo pid,cmd | grep -E '(pmon|ora_|tnslsnr|db_)' | grep -v grep | awk '{print $1}' | sort -u || true)
             if [ -n "$REMAIN" ]; then kill -9 $REMAIN || true; fi
           become: true
           failed_when: false

         - name: Kill oracle user processes (local)
           ansible.builtin.shell: |
             if id oracle &>/dev/null; then
               pkill -9 -u oracle || true
               sleep 2
               pkill -9 -u oracle || true
             fi
             exit 0
           become: true
           failed_when: false

         - name: Verify Oracle processes stopped (local)
           ansible.builtin.shell: |
             ps -eo pid,cmd | grep -E '(pmon|ora_|tnslsnr|db_)' | grep -v grep || true
           register: local_oracle_process_check
           changed_when: false
           failed_when: local_oracle_process_check.stdout | default('') | trim | length > 0
           ignore_errors: true

         - name: Report remaining Oracle processes (local)
           ansible.builtin.debug:
             msg: "Oracle processes still running locally after uninstall attempt:\n{{ local_oracle_process_check.stdout | default('') }}"
           when: local_oracle_process_check.stdout | default('') | trim | length > 0

         - name: Remove Oracle RPM packages (local)
           ansible.builtin.dnf:
             name:
               - oracle-database-free-23ai
               - oracle-database-preinstall-23ai
             state: absent
           become: true
           failed_when: false

         - name: Remove Oracle config files (local)
           ansible.builtin.file:
             path: "{{ item }}"
             state: absent
           loop: "{{ oracle_misc_files }}"
           become: true
           failed_when: false

         - name: Remove Oracle directories (local)
           ansible.builtin.file:
             path: "{{ item }}"
             state: absent
           loop: "{{ oracle_directories }}"
           become: true
           failed_when: false

         - name: Remove temp & log files (local)
           ansible.builtin.file:
             path: "{{ item }}"
             state: absent
           loop: "{{ oracle_temp_files }}"
           become: true
           failed_when: false

         - name: Cleanup /tmp oracle log artifacts (local)
           ansible.builtin.shell: |
             RC=0
             FREED=0
             for pat in {{ oracle_tmp_oracle_patterns | join(' ') }}; do
               for p in $pat; do
                 [ "$p" = "$pat" ] && [ ! -e "$p" ] && continue  # skip literal when no match
                 if [ -e "$p" ]; then
                   SIZE=$(du -sk "$p" 2>/dev/null | awk '{print $1}')
                   rm -rf -- "$p" || RC=1
                   if [ -n "$SIZE" ]; then FREED=$((FREED+SIZE)); fi
                 fi
               done
             done
             echo "FREED_KB=$FREED RC=$RC"
             exit 0
           args:
             warn: false
           when: oracle_clean_tmp_oracle_logs | bool
           become: true
           register: local_tmp_cleanup
           changed_when: local_tmp_cleanup.stdout is search('FREED_KB=') and (local_tmp_cleanup.stdout | regex_search('FREED_KB=(\\d+)', '\\1') | int) > 0
           failed_when: false

         - name: Check if oracle user exists (local)
           ansible.builtin.command: id oracle
           register: oracle_id_check
           changed_when: false
           failed_when: false
           become: true

         - name: Remove oracle env lines (local)
           ansible.builtin.lineinfile:
             path: /home/oracle/.bash_profile
             regexp: "{{ item }}"
             state: absent
             create: false
           loop:
             - '^export ORACLE_HOME='
             - '^export ORACLE_SID='
             - '^export ORACLE_BASE='
             - '^export TNS_ADMIN='
           become: true
           failed_when: false
           when: local_shutdown is defined and oracle_id_check.rc == 0

         - name: Remove oracle user (local optional)
           ansible.builtin.user:
             name: oracle
             state: absent
             remove: true
           when: oracle_force_remove_user | bool
           become: true
           failed_when: false

         - name: Remove oracle groups (local optional)
           ansible.builtin.group:
             name: "{{ item }}"
             state: absent
           loop: ["oinstall", "dba"]
           when: oracle_force_remove_groups | bool
           become: true
           failed_when: false

         - name: Local uninstall summary
           ansible.builtin.debug:
             msg:
               - "Local Oracle uninstall complete"
               - "Paths removed: {{ oracle_directories | join(', ') }}"
               - "Config files removed: {{ oracle_misc_files | join(', ') }}"
               - "Temp files removed: {{ oracle_temp_files | join(', ') }}"
               - "Tmp oracle pattern cleanup: {{ (local_tmp_cleanup.stdout | default('')) | trim }}"

    - name: Get VM instance (remote path)
      when: not oracle_local_uninstall | bool
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: target_vmi

    - name: Remote uninstall block
      when: not oracle_local_uninstall | bool and target_vmi is defined and (target_vmi.resources | length > 0)
      block:
         - name: Set vm_ip fact
           ansible.builtin.set_fact:
             vm_ip: "{{ target_vmi.resources[0].status.interfaces[0].ipAddress }}"
           when: target_vmi.resources[0].status.interfaces is defined

         - name: Add VM to temp inventory
           ansible.builtin.add_host:
             name: "{{ vm_name }}"
             ansible_host: "{{ vm_ip }}"
             ansible_user: redhat
             ansible_password: redhat
             ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
             ansible_become: true
             ansible_become_method: sudo
             ansible_become_password: redhat
           when: vm_ip is defined

         - name: Remote cleanup tasks
           delegate_to: "{{ vm_name }}"
           become: true
           block:
             - name: Stop oracle service
               ansible.builtin.systemd:
                 name: oracle-free-23ai
                 state: stopped
                 enabled: false
               failed_when: false

             - name: Discover oracle-related services
               ansible.builtin.shell: |
                 systemctl list-units --type=service --all | awk '/oracle/ {print $1}' | sort -u
               register: oracle_services
               changed_when: false
               failed_when: false

             - name: Stop oracle-related services
               ansible.builtin.systemd:
                 name: "{{ item }}"
                 state: stopped
                 enabled: false
               loop: "{{ oracle_services.stdout_lines | default([]) }}"
               when: oracle_services.stdout_lines | default([]) | length > 0
               failed_when: false

             - name: Shutdown database
               ansible.builtin.shell: |
                 if id oracle &>/dev/null; then
                   sudo -u oracle bash -lc 'if [ -f /home/oracle/.bash_profile ]; then source /home/oracle/.bash_profile; fi; printf "SHUTDOWN IMMEDIATE;\nEXIT;\n" | sqlplus / as sysdba || true'
                 fi
               failed_when: false

             - name: Stop listener
               ansible.builtin.shell: |
                 if id oracle &>/dev/null; then
                   sudo -u oracle bash -lc 'if [ -f /home/oracle/.bash_profile ]; then source /home/oracle/.bash_profile; fi; lsnrctl stop || true'
                 fi
               failed_when: false

             - name: Kill leftover processes
               ansible.builtin.shell: |
                 PIDS=$(ps -eo pid,cmd | grep -E '(pmon|ora_|tnslsnr|db_)' | grep -v grep | awk '{print $1}' | sort -u || true)
                 if [ -n "$PIDS" ]; then kill -9 $PIDS || true; sleep 2; fi
                 REMAIN=$(ps -eo pid,cmd | grep -E '(pmon|ora_|tnslsnr|db_)' | grep -v grep | awk '{print $1}' | sort -u || true)
                 if [ -n "$REMAIN" ]; then kill -9 $REMAIN || true; fi
               failed_when: false

             - name: Kill oracle user processes
               ansible.builtin.shell: |
                 if id oracle &>/dev/null; then
                   pkill -9 -u oracle || true
                   sleep 2
                   pkill -9 -u oracle || true
                 fi
                 exit 0
               failed_when: false

             - name: Remove RPMs
               ansible.builtin.dnf:
                 name:
                   - oracle-database-free-23ai
                   - oracle-database-preinstall-23ai
                 state: absent
               failed_when: false

             - name: Remove config files
               ansible.builtin.file:
                 path: "{{ item }}"
                 state: absent
               loop: "{{ oracle_misc_files }}"
               failed_when: false

             - name: Remove directories
               ansible.builtin.file:
                 path: "{{ item }}"
                 state: absent
               loop: "{{ oracle_directories }}"
               failed_when: false

             - name: Remove temp files
               ansible.builtin.file:
                 path: "{{ item }}"
                 state: absent
               loop: "{{ oracle_temp_files }}"
               failed_when: false

             - name: Verify Oracle processes stopped
               ansible.builtin.shell: |
                 ps -eo pid,cmd | grep -E '(pmon|ora_|tnslsnr|db_)' | grep -v grep || true
               register: oracle_process_check
               changed_when: false
               failed_when: oracle_process_check.stdout | default('') | trim | length > 0
               ignore_errors: true

             - name: Report remaining Oracle processes (if any)
               ansible.builtin.debug:
                 msg: "Oracle processes still running after uninstall attempt:\n{{ oracle_process_check.stdout | default('') }}"
               when: oracle_process_check.stdout | default('') | trim | length > 0

             - name: Cleanup /tmp oracle log artifacts (remote)
               ansible.builtin.shell: |
                 RC=0
                 FREED=0
                 for pat in {{ oracle_tmp_oracle_patterns | join(' ') }}; do
                   for p in $pat; do
                     [ "$p" = "$pat" ] && [ ! -e "$p" ] && continue
                     if [ -e "$p" ]; then
                       SIZE=$(du -sk "$p" 2>/dev/null | awk '{print $1}')
                       rm -rf -- "$p" || RC=1
                       if [ -n "$SIZE" ]; then FREED=$((FREED+SIZE)); fi
                     fi
                   done
                 done
                 echo "FREED_KB=$FREED RC=$RC"
                 exit 0
               when: oracle_clean_tmp_oracle_logs | bool
               register: remote_tmp_cleanup
               changed_when: remote_tmp_cleanup is defined and (remote_tmp_cleanup.stdout | default('')) is search('FREED_KB=') and ((remote_tmp_cleanup.stdout | regex_search('FREED_KB=([0-9]+)', '\\1') | default('0') | int) > 0)
               failed_when: false

             - name: Derive freed space facts (remote tmp cleanup)
               ansible.builtin.set_fact:
                 remote_tmp_freed_kb: "{{ (remote_tmp_cleanup.stdout | regex_search('FREED_KB=([0-9]+)', '\\1') | default('0')) | int }}"
                 remote_tmp_freed_mb: "{{ '%.2f' % ((remote_tmp_cleanup.stdout | regex_search('FREED_KB=([0-9]+)', '\\1') | default('0') | int) / 1024) }}"
                 remote_tmp_freed_gb: "{{ '%.2f' % ((remote_tmp_cleanup.stdout | regex_search('FREED_KB=([0-9]+)', '\\1') | default('0') | int) / 1048576) }}"
               when: oracle_clean_tmp_oracle_logs | bool and remote_tmp_cleanup is defined

             - name: Remove oracle user
               ansible.builtin.user:
                 name: oracle
                 state: absent
                 remove: true
               when: oracle_force_remove_user | bool
               failed_when: false

             - name: Remove oracle groups
               ansible.builtin.group:
                 name: "{{ item }}"
                 state: absent
               loop: ["oinstall", "dba"]
               when: oracle_force_remove_groups | bool
               failed_when: false

         - name: Remote uninstall summary
           ansible.builtin.debug:
             msg:
               - "Remote Oracle uninstall complete for VM {{ vm_name }}"
               - "IP: {{ vm_ip | default('unknown') }}"
               - "Tmp oracle pattern cleanup raw: {{ (remote_tmp_cleanup.stdout | default('')) | trim }}"
               - "Tmp oracle freed: {{ remote_tmp_freed_kb | default(0) }} KB (~{{ remote_tmp_freed_mb | default('0.00') }} MB / {{ remote_tmp_freed_gb | default('0.00') }} GB)"

    - name: VM not found summary
      when: not oracle_local_uninstall | bool and target_vmi is defined and target_vmi.resources | length == 0
      ansible.builtin.debug:
        msg:
          - "VM {{ vm_name }} not found in namespace {{ kubevirt_namespace }} - nothing to do"
