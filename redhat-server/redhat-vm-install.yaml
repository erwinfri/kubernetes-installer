
- name: Set qcow2 image path and filename
  ansible.builtin.set_fact:
    qcow2_image_path: "{{ qcow2_image_path | default('./rhel-9.6-x86_64-kvm.qcow2') }}"
    qcow2_image_filename: "{{ qcow2_image_filename | default('rhel-9.6-x86_64-kvm.qcow2') }}"

- name: Set auto-convert and EFI defaults
  ansible.builtin.set_fact:
    rhel_vm_auto_convert_qcow2_to_raw: "{{ rhel_vm_auto_convert_qcow2_to_raw | default(true) }}"
    rhel_vm_enable_efi: "{{ rhel_vm_enable_efi | default(false) }}"

- name: Check if qcow2 image is present
  ansible.builtin.stat:
    path: "{{ qcow2_image_path }}"
  register: qcow2_image_stat

- name: Display download instructions if qcow2 image is missing
  ansible.builtin.debug:
    msg:
      - "The required RHEL 9.6 qcow2 image is missing: {{ qcow2_image_path }}"
      - "Please download it manually from: https://access.redhat.com/downloads/content/479/ver=/rhel---9/9.6/x86_64/product-software"
      - "Filename: rhel-9.6-x86_64-kvm.qcow2 (or override in CR)"
      - "Place the file at: {{ qcow2_image_path }} before running the installer."
  when: not qcow2_image_stat.stat.exists

- name: Optionally download qcow2 image if missing (set qcow2_auto_download=true to enable)
  ansible.builtin.get_url:
    url: "{{ qcow2_image_url | default('https://access.redhat.com/downloads/content/rhel-9/9.6/x86_64/guest-image-qcow2') }}"
    dest: "{{ qcow2_image_path }}"
    mode: '0644'
    force: no
  when: not qcow2_image_stat.stat.exists and (qcow2_auto_download | default(false))

- name: Re-check if qcow2 image is present after download
  ansible.builtin.stat:
    path: "{{ qcow2_image_path }}"
  register: qcow2_image_stat

- name: Fail if qcow2 image is missing
  ansible.builtin.fail:
    msg: "RHEL 9.6 qcow2 image not found at {{ qcow2_image_path }}. Download it manually as instructed above, or set qcow2_auto_download=true to allow automatic download."
  when: not qcow2_image_stat.stat.exists

- name: Ensure storage base directory exists
  ansible.builtin.set_fact:
    storage_dir: "{{ storage_dir | default('/data/vms') }}"

- name: Get node hostname for PV affinity
  ansible.builtin.shell: kubectl get nodes -o jsonpath='{.items[0].metadata.name}'
  register: node_hostname
  changed_when: false

- name: Set PV resources for RHEL (single system disk)
  ansible.builtin.set_fact:
    rhel_pv_resources:
      - name: "{{ vm_name | default('rhel9-vm') }}-system-pv"
        size: "{{ system_disk_size | default('20Gi') }}"
        access_modes: ["ReadWriteOnce"]
        path: "{{ vm_name | default('rhel9-vm') }}-system-disk"
        claim_namespace: "{{ kubevirt_namespace | default('default') }}"

- name: Compute absolute storage directory
  ansible.builtin.set_fact:
    storage_abs_dir: "{{ storage_dir }}"

- name: Check for existing PVs for RHEL
  kubernetes.core.k8s_info:
    api_version: v1
    kind: PersistentVolume
    name: "{{ item.name }}"
  register: rhel_pv_check
  failed_when: false
  loop: "{{ rhel_pv_resources }}"
  loop_control:
    label: "{{ item.name }}"

- name: Create PersistentVolume(s) for RHEL system disk
  block:
    - name: Create PersistentVolume for RHEL (if missing)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: "{{ item.name }}"
            labels:
              type: local
              app: "{{ vm_name | default('rhel9-vm') }}"
          spec:
            capacity:
              storage: "{{ item.size }}"
            accessModes: "{{ item.access_modes }}"
            persistentVolumeReclaimPolicy: Retain
            storageClassName: local-storage
            volumeMode: Filesystem
            hostPath:
              path: "{{ storage_abs_dir }}/{{ item.path }}"
              type: Directory
            nodeAffinity:
              required:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values: ["{{ node_hostname.stdout }}"]
      when: rhel_pv_check.results[pv_idx].resources | length == 0
      loop: "{{ rhel_pv_resources }}"
      loop_control:
        index_var: pv_idx

- name: Ensure hostPath directory exists for RHEL PV (local control host; ensure same on node)
  ansible.builtin.file:
    path: "{{ storage_dir }}/{{ vm_name | default('rhel9-vm') }}-system-disk"
    state: directory
    mode: '0777'


- name: Create PVC for VM root disk (qcow2)
  block:
    - name: Check for existing PVC for rhel9 system disk
      kubernetes.core.k8s_info:
        api_version: v1
        kind: PersistentVolumeClaim
        name: "{{ vm_name | default('rhel9-vm') }}-system-disk"
        namespace: "{{ kubevirt_namespace | default('default') }}"
      register: existing_rhel_pvc
      failed_when: false

    - name: Delete existing PVC if storageClass mismatches desired (local-storage) or is not Bound
      kubernetes.core.k8s:
        state: absent
        kind: PersistentVolumeClaim
        api_version: v1
        name: "{{ vm_name | default('rhel9-vm') }}-system-disk"
        namespace: "{{ kubevirt_namespace | default('default') }}"
      register: pvc_removed
      failed_when: false
      when: existing_rhel_pvc.resources | length > 0 and ((existing_rhel_pvc.resources[0].spec.storageClassName | default('')) != 'local-storage' or (existing_rhel_pvc.resources[0].status.phase | default('') ) != 'Bound')

    - name: Create PersistentVolumeClaim for VM root disk (bind to specific PV)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ vm_name | default('rhel9-vm') }}-system-disk"
            namespace: "{{ kubevirt_namespace | default('default') }}"
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: "{{ system_disk_size | default('20Gi') }}"
            storageClassName: local-storage
            volumeMode: Filesystem
            volumeName: "{{ vm_name | default('rhel9-vm') }}-system-pv"
      when: qcow2_image_stat.stat.exists and (existing_rhel_pvc.resources | length == 0 or (pvc_removed is defined and pvc_removed.changed))
  when: qcow2_image_stat.stat.exists

- name: Wait for PV to be bound and get host path for PVC
  block:
    - name: Wait for PV to be Bound
      kubernetes.core.k8s_info:
        api_version: v1
        kind: PersistentVolume
        name: "{{ vm_name | default('rhel9-vm') }}-system-pv"
      register: pv_info
      until: pv_info.resources | length > 0 and pv_info.resources[0].status.phase == 'Bound'
      retries: 20
      delay: 3
      failed_when: false

    - name: Fail if PV did not bind in time
      ansible.builtin.fail:
        msg: "PersistentVolume {{ vm_name | default('rhel9-vm') }}-system-pv did not bind within timeout. Check PVC and nodeAffinity."
      when: pv_info.resources | length == 0 or pv_info.resources[0].status.phase != 'Bound'

    - name: Set PV hostPath variable
      ansible.builtin.set_fact:
        pv_hostpath: "{{ pv_info.resources[0].spec.hostPath.path }}"
  when: qcow2_image_stat.stat.exists

- name: Ensure PV directory exists (create if missing)
  ansible.builtin.file:
    path: "{{ pv_hostpath | default(storage_abs_dir + '/' + (vm_name | default('rhel9-vm')) + '-system-disk') }}"
    state: directory
    mode: '0777'
  when: qcow2_image_stat.stat.exists
  register: pv_dir_create_result

- name: Fail if PV directory creation failed
  ansible.builtin.fail:
    msg: "Failed to create PV directory for PVC {{ vm_name | default('rhel9-vm') }}-system-disk. Check local-path provisioner and permissions."
  when: pv_dir_create_result is defined and pv_dir_create_result.failed

- name: Check current disk format with qemu-img (from source qcow2)
  ansible.builtin.command:
    cmd: "qemu-img info '{{ qcow2_image_path }}'"
  register: qemu_img_info
  failed_when: false
  changed_when: false
  when: qcow2_image_stat.stat.exists and (rhel_vm_auto_convert_qcow2_to_raw | bool)

- name: Convert qcow2 image to RAW format in PV directory
  ansible.builtin.command:
    cmd: "qemu-img convert -p -f qcow2 -O raw '{{ qcow2_image_path }}' '{{ (pv_hostpath | default(storage_abs_dir + '/' + (vm_name | default('rhel9-vm')) + '-system-disk')) + '/disk.img' }}'"
  register: qemu_convert
  changed_when: "qemu_convert.rc == 0"
  failed_when: qemu_convert.rc != 0
  when: >-
    qcow2_image_stat.stat.exists and (rhel_vm_auto_convert_qcow2_to_raw | bool) and
    ('file format: qcow2' in (qemu_img_info.stdout | default('')))

- name: Convert system_disk_size to qemu-img compatible format
  ansible.builtin.set_fact:
    qemu_disk_size: "{{ system_disk_size | default('20Gi') | regex_replace('Gi$', 'G') | regex_replace('Mi$', 'M') | regex_replace('Ki$', 'K') | regex_replace('Ti$', 'T') | regex_replace('Pi$', 'P') | regex_replace('Ei$', 'E') }}"
  when: >-
    qcow2_image_stat.stat.exists and (rhel_vm_auto_convert_qcow2_to_raw | bool) and
    (qemu_convert is defined and qemu_convert.rc == 0)

- name: Resize raw disk image to match system_disk_size
  ansible.builtin.command:
    cmd: "qemu-img resize '{{ (pv_hostpath | default(storage_abs_dir + '/' + (vm_name | default('rhel9-vm')) + '-system-disk')) + '/disk.img' }}' {{ qemu_disk_size }}"
  register: qemu_resize
  changed_when: "qemu_resize.rc == 0"
  failed_when: qemu_resize.rc != 0
  when: >-
    qcow2_image_stat.stat.exists and (rhel_vm_auto_convert_qcow2_to_raw | bool) and
    (qemu_convert is defined and qemu_convert.rc == 0)

- name: Set ownership and permissions on disk.img after conversion
  ansible.builtin.file:
    path: "{{ (pv_hostpath | default(storage_abs_dir + '/' + (vm_name | default('rhel9-vm')) + '-system-disk')) + '/disk.img' }}"
    owner: qemu
    group: qemu
    mode: '0644'
  when: qcow2_image_stat.stat.exists and (rhel_vm_auto_convert_qcow2_to_raw | bool) and (qemu_convert is defined and qemu_convert.rc == 0)


- name: Set subscription credentials from environment
  ansible.builtin.set_fact:
    subscription_username: "{{ lookup('env', 'subscription_username') | default(subscription_username | default('XXXXX')) }}"
    subscription_password: "{{ lookup('env', 'subscription_password') | default(subscription_password | default('XXXX')) }}"
- name: Set storage_dir default
  ansible.builtin.set_fact:
    storage_dir: "{{ storage_dir | default('/data/vms') }}"
- name: Debug input variables
  debug:
    msg:


      - "Creating RHEL9 VM with the following spec:"

- name: Ensure port-forward script exists and is executable
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/library/start_portforward.sh"
  register: portforward_script_stat

- name: Fail if port-forward script is missing or not executable
  ansible.builtin.fail:
    msg: "Port-forward script is missing or not executable: {{ playbook_dir }}/library/start_portforward.sh"
  when: not portforward_script_stat.stat.exists or not portforward_script_stat.stat.mode|int is search('7')

- name: Port-forward Vault service for local access
  ansible.builtin.shell: |
    ./library/start_portforward.sh vault 8200 default /tmp/vault-portforward.log /tmp/vault-portforward.pid
    sleep 5
  async: 10
  poll: 0
  register: port_forward_job

- name: Show Vault port-forward log for troubleshooting
  ansible.builtin.shell: cat /tmp/vault-portforward.log || true
  register: vault_portforward_log
  changed_when: false
  ignore_errors: true
  tags: always

- name: Display Vault port-forward log output
  ansible.builtin.debug:
    var: vault_portforward_log.stdout
  tags: always

- name: Wait for Vault API to be reachable on localhost:8200
  ansible.builtin.wait_for:
    host: localhost
    port: 8200
    delay: 2
    timeout: 30
    state: started
  tags: always

- name: Set Vault environment variables for Ansible and CLI
  ansible.builtin.set_fact:
    vault_env:
      VAULT_ADDR: "http://localhost:8200"
      VAULT_TOKEN: "{{ lookup('file', '/root/.vault-token') | trim }}"
  tags: always

- name: Vault CLI login with token from /root/.vault-token
  ansible.builtin.shell: |
    export VAULT_ADDR="http://localhost:8200"
    vault login $(cat /root/.vault-token)
  environment: "{{ vault_env }}"
  register: vault_cli_login
  changed_when: false
  failed_when: vault_cli_login.rc != 0 or 'Success! You are now authenticated' not in vault_cli_login.stdout
  tags: always

- name: Show Vault CLI login output
  ansible.builtin.debug:
    var: vault_cli_login.stdout
  tags: always

- name: Ensure KV secrets engine is enabled at 'secret/'
  ansible.builtin.shell: |
    vault secrets enable -path=secret kv || vault secrets tune -max-lease-ttl=87600h secret/
  environment: "{{ vault_env }}"
  register: vault_kv_enable
  changed_when: "'successfully enabled' in vault_kv_enable.stdout or 'Success! Tuned the mount' in vault_kv_enable.stdout"
  failed_when: false
  tags: always

- name: Print admin password and vault secret before Vault policy
  ansible.builtin.debug:
    msg:
      - "root_password={{ root_password | default('UNDEFINED') }}"
      - "redhat_vault_secret={{ redhat_vault_secret | default('UNDEFINED') }}"
  tags: always

- name: Write Vault policy file for redhat-vm-admin-policy
  ansible.builtin.copy:
    dest: /tmp/redhat-vm-admin-policy.hcl
    content: |
      path "{{ redhat_vault_secret | default('secret/redhat-vm-admin') }}" {
        capabilities = ["create", "update", "read", "delete", "list"]
      }
  tags: always

- name: Write redhat-vm-admin-policy to Vault
  ansible.builtin.shell: |
    vault policy write redhat-vm-admin-policy /tmp/redhat-vm-admin-policy.hcl
  environment: "{{ vault_env }}"
  register: vault_policy_write_result
  changed_when: vault_policy_write_result.rc == 0
  failed_when: vault_policy_write_result.rc != 0
  tags: always

- name: Create Vault token with redhat-vm-admin-policy
  ansible.builtin.shell: |
    vault token create -policy=redhat-vm-admin-policy -format=json > /tmp/redhat-vm-admin-token.json
  environment: "{{ vault_env }}"
  register: vault_token_create_result
  changed_when: vault_token_create_result.rc == 0
  failed_when: vault_token_create_result.rc != 0
  tags: always

- name: Read created Vault token value
  ansible.builtin.shell: jq -r .auth.client_token /tmp/redhat-vm-admin-token.json
  register: redhat_vm_admin_token
  changed_when: false
  tags: always

- name: Set Vault environment for admin token
  ansible.builtin.set_fact:
    redhat_vault_env:
      VAULT_ADDR: "http://localhost:8200"
      VAULT_TOKEN: "{{ redhat_vm_admin_token.stdout }}"
    redhat_vm_admin_token: "{{ redhat_vm_admin_token.stdout }}"
  tags: always

- name: Write Red Hat VM admin password to Vault
  ansible.builtin.shell: |
    vault kv put {{ redhat_vault_secret | default('secret/redhat-vm-admin') }} password='{{ root_password | default('redhat') }}'
  environment: "{{ redhat_vault_env }}"
  register: vault_write_password_result
  changed_when: "'Success! Data written' in vault_write_password_result.stdout or vault_write_password_result.rc == 0"
  failed_when: vault_write_password_result.rc != 0

- name: Set Vault environment variables for Ansible and CLI
  ansible.builtin.set_fact:
    vault_env:
      VAULT_ADDR: "http://localhost:8200"
      VAULT_TOKEN: "{{ lookup('file', '/root/.vault-token') | trim }}"

- name: Write Red Hat VM admin password to Vault
  ansible.builtin.shell: |
    vault kv put {{ redhat_vault_secret | default('secret/redhat-vm-admin') }} password='{{ root_password | default('redhat') }}'
  environment: "{{ vault_env }}"
  register: vault_write_password_result
  changed_when: "'Success! Data written' in vault_write_password_result.stdout or vault_write_password_result.rc == 0"
  failed_when: vault_write_password_result.rc != 0

- name: Build VirtualMachine definition
  ansible.builtin.set_fact:
    vm_definition:
      apiVersion: kubevirt.io/v1
      kind: VirtualMachine
      metadata:
        name: "{{ vm_name | default('rhel9-vm') }}"
        namespace: "{{ kubevirt_namespace | default('default') }}"
      spec:
        running: true
        template:
          metadata:
            labels:
              kubevirt.io/domain: "{{ vm_name | default('rhel9-vm') }}"
          spec:
            domain:
              cpu:
                cores: "{{ vm_cpu_cores | default(2) | int }}"
              devices:
                disks:
                  - name: rootdisk
                    disk:
                      bus: "{{ disk_bus | default('virtio') }}"
                  - name: cloudinitdisk
                    disk:
                      bus: "{{ disk_bus | default('virtio') }}"
              resources:
                requests:
                  memory: "{{ vm_memory | default('4Gi') }}"
            volumes:
              - name: rootdisk
                persistentVolumeClaim:
                  claimName: "{{ vm_name | default('rhel9-vm') }}-system-disk"
              - name: cloudinitdisk
                cloudInitNoCloud:
                  userData: |
                    #cloud-config
                    hostname: "{{ vm_name | default('rhel9-vm') }}"
                    disable_root: false
                    ssh_pwauth: true
                    users:
                      - name: {{ redhat_user | default('redhat') }}
                        sudo: ALL=(ALL) NOPASSWD:ALL
                        lock_passwd: false
                    chpasswd:
                      list: |
                        root:{{ root_password | default('redhat') }}
                        {{ redhat_user | default('redhat') }}:{{ user_password | default('redhat') }}
                      expire: False
                    write_files:
                      - path: /etc/ssh/sshd_config.d/99-cloud-init.conf
                        content: |
                          PasswordAuthentication yes
                          ChallengeResponseAuthentication no
                          UsePAM yes
                    runcmd:
                      - growpart /dev/vda 1
                      - resize2fs /dev/vda1
                      - systemctl reload sshd
                      - echo "==== cloud-init runcmd starting ====" | tee -a /var/log/cloudinit-debug.log
                      - subscription-manager register --username="{{ subscription_username | default('XXXX') }}" --password="{{ subscription_password | default('XXXX') }}" --auto-attach 2>&1
                      - subscription-manager syspurpose usage --set "{{ syspurpose_usage | default('Development/Test') }}" 2>&1 | tee -a /var/log/cloudinit-debug.log
                      - subscription-manager repos --enable=rhel-9-for-x86_64-baseos-rpms --enable=rhel-9-for-x86_64-appstream-rpms 2>&1 | tee -a /var/log/cloudinit-debug.log
                      - echo "==== cloud-init runcmd finished ====" | tee -a /var/log/cloudinit-debug.log

- name: Fix cores to be integer type (ensure proper type casting)
  ansible.builtin.set_fact:
    vm_definition: "{{ vm_definition | combine({'spec': {'template': {'spec': {'domain': {'cpu': {'cores': vm_cpu_cores | default(2) | int}}}}}}, recursive=True) }}"


- name: Optionally enable EFI firmware in VM definition
  ansible.builtin.set_fact:
    vm_definition: >-
      {{ vm_definition | combine({'spec': {'template': {'spec': {'domain': {'firmware': {'efi': {} }}}}}}, recursive=True) if (rhel_vm_enable_efi | bool) else vm_definition }}

- name: Create RHEL9 VM
  kubernetes.core.k8s:
    definition: "{{ vm_definition }}"
    state: present


- name: Wait for VM to be running and ready
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachine
    name: "{{ vm_name | default('rhel9-vm') }}"
    namespace: "{{ kubevirt_namespace | default('default') }}"
  register: vm_status
  until: >-
    vm_status.resources | length > 0 and
    vm_status.resources[0].status.printableStatus == 'Running'
  retries: 20
  delay: 3


# Query VMI for IP address after VM is up
- name: Get VMI info for IP address
  kubernetes.core.k8s_info:
    api_version: kubevirt.io/v1
    kind: VirtualMachineInstance
    name: "{{ vm_name | default('rhel9-vm') }}"
    namespace: "{{ kubevirt_namespace | default('default') }}"
  register: vmi_status

# Display useful access and retrieval commands (must be last)
- name: Display useful access and retrieval commands
  ansible.builtin.debug:
    msg:
      - "\n\n==================== Useful Access & Retrieval Commands ===================="
      - "Vault is initialized and unsealed (persistent mode, file storage)."
      - "Root token is in /tmp/vault-init.json (key: .root_token)."
      - "To port-forward for local access:"
      - "  ./library/start_portforward.sh vault 8200 default /tmp/vault-portforward.log /tmp/vault-portforward.pid"
      - "Then set VAULT_ADDR and use the CLI:"
      - "  export VAULT_ADDR=http://localhost:8200"
      - "  vault status"
      - "  vault login <root_token>"
      - ""
      - "🔐 Retrieve Administrator password from Vault:"
      - "  vault kv get -field=password {{ redhat_vault_secret | default('secret/redhat-vm-admin') }}"
      - "  (Requires VAULT_ADDR and VAULT_TOKEN to be set)"
      - ""
      - "🖥️  VNC Access:"
      - "  Direct: virtctl vnc {{ vm_name | default('rhel9-vm') }} -n {{ kubevirt_namespace | default('default') }}"
      - "  Proxy: virtctl vnc {{ vm_name | default('rhel9-vm') }} -n {{ kubevirt_namespace | default('default') }} --proxy-only --port 5900"
      - "  NodePort: localhost:30001 (if NodePort allowed through firewall)"
      - ""
      - "🛠️  Console Access:"
      - "  Serial: virtctl console {{ vm_name | default('rhel9-vm') }} -n {{ kubevirt_namespace | default('default') }}"
      - ""
      - "📁 Storage Configuration:"
      - "  System Disk: {{ storage_dir }}/{{ vm_name | default('rhel9-vm') }}-system-disk/disk.img"
      - "  CloudInit: {{ storage_dir }}/cloudinit-{{ vm_name | default('rhel9-vm') }}.yaml"
      - ""
      - "🌐 VM IP Address: {{ (vmi_status.resources[0].status.interfaces[0].ipAddress if vmi_status.resources | length > 0 and vmi_status.resources[0].status.interfaces is defined and vmi_status.resources[0].status.interfaces | length > 0 and vmi_status.resources[0].status.interfaces[0].ipAddress is defined else 'Not Found') }}"
      - " You can manage late your subscribed Redhat VM Resources - https://console.redhat.com/insights/inventory"
      - "==========================================================================\n\n"
