# Windows Server Automation Playbook
# This playbook demonstrates various methods to automate Windows Server 2019/2025 VM

- name: Generic Windows Server Automation
  hosts: localhost
  gather_facts: false
  vars:
    vm_name: "{{ vm_name | default('win2025server') }}"
    kubevirt_namespace: "kubevirt"
    windows_vm_ip: ""
    windows_admin_password: "SecureP@ssw0rd!"
    sa_password: "SecureP@ssw0rd!"
  tasks:
    - name: Get VM info for WinRM port forward
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: vmi_info

    - name: Set VM IP from Kubernetes
      ansible.builtin.set_fact:
        windows_vm_ip: "{{ vmi_info.resources[0].status.interfaces[0].ipAddress }}"
      when: vmi_info.resources | length > 0

    - name: Display VM connection info
      ansible.builtin.debug:
        msg:
          - "Ô∏è  Windows VM Information:"
          - "  VM Name: {{ vm_name }}"
          - "  IP Address: {{ windows_vm_ip }}"
          - "  Admin Password: {{ windows_admin_password }}"

    # --- MS SQL 2025 Real Installer Steps (WinRM required) ---
    - name: Start WinRM port-forward using start_portforward.sh
      ansible.builtin.shell: |
        ./library/start_portforward.sh {{ vm_name }}-winrm 5985 {{ kubevirt_namespace }} /tmp/winrm-portforward.log /tmp/winrm-portforward.pid
      args:
        chdir: "{{ playbook_dir | default('.') }}"
      register: port_forward_result

    - name: Test WinRM connection via localhost
      ansible.builtin.uri:
        url: "http://localhost:5985/wsman"
        method: POST
        headers:
          Content-Type: "application/soap+xml;charset=UTF-8"
          SOAPAction: "http://schemas.xmlsoap.org/ws/2004/09/enumeration/Enumerate"
        body: |
          <?xml version="1.0" encoding="utf-8"?>
          <s:Envelope xmlns:s="http://www.w3.org/2003/05/soap-envelope">
            <s:Header>
              <a:Action xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing">http://schemas.xmlsoap.org/ws/2004/09/enumeration/Enumerate</a:Action>
              <a:To xmlns:a="http://schemas.xmlsoap.org/ws/2004/08/addressing">http://localhost:5985/wsman</a:To>
            </s:Header>
            <s:Body>
              <n:Enumerate xmlns:n="http://schemas.xmlsoap.org/ws/2004/09/enumeration">
                <w:ResourceURI xmlns:w="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd">http://schemas.microsoft.com/wbem/wsman/1/windows/shell</w:ResourceURI>
              </n:Enumerate>
            </s:Body>
          </s:Envelope>
        status_code: [200, 401, 500]
      register: winrm_test
      ignore_errors: true

    - name: Query Windows version via WinRM
      win_shell: |
        Get-WmiObject -Class Win32_OperatingSystem | Select-Object Caption, Version, BuildNumber
      register: win_version
      delegate_to: localhost
      vars:
        ansible_connection: winrm
        ansible_user: Administrator
        ansible_password: "{{ windows_admin_password }}"
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5985
        ansible_winrm_scheme: http
        ansible_host: localhost
      when: mssql_install | default(false) | bool

    - name: Show Windows version (WinRM)
      debug:
        var: win_version.stdout
      when: mssql_install | default(false) | bool

    - name: Display WinRM test result
      ansible.builtin.debug:
        msg:
          - "WinRM Test Result: {{ winrm_test.status | default('Failed') }}"
          - "{{ 'WinRM is responding!' if winrm_test.status in [401, 500] else 'WinRM not ready yet' }}"

    - name: Create C:\Data directory for MSSQL (WinRM)
      win_file:
        path: "C:\\Data"
        state: directory
      vars:
        ansible_connection: winrm
        ansible_user: Administrator
        ansible_password: "{{ windows_admin_password }}"
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5985
        ansible_winrm_scheme: http
        ansible_host: localhost
      when: mssql_install | default(false) | bool

    - name: Check if installer exists on controller before copy
      stat:
        path: "./MS_SQL_2025.exe"
      register: installer_stat
      delegate_to: localhost
      when: mssql_install | default(false) | bool

    - name: Fail if installer is missing on controller
      fail:
        msg: "Installer ./MS_SQL_2025.exe does not exist on controller!"
      when: mssql_install | default(false) | bool and not installer_stat.stat.exists

    - name: Copy MS SQL installer exe to Windows VM (WinRM)
      win_copy:
        src: "./MS_SQL_2025.exe"
        dest: "C:\\Data\\MS_SQL_2025.exe"
        force: yes
      vars:
        ansible_connection: winrm
        ansible_user: Administrator
        ansible_password: "{{ windows_admin_password }}"
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5985
        ansible_winrm_scheme: http
        ansible_host: localhost
      register: win_copy_result
      when: mssql_install | default(false) | bool and installer_stat.stat.exists



    - name: Install MS SQL Server 2025 using installer exe (WinRM)
      win_shell: |
        $p = Start-Process -FilePath "C:\Data\MS_SQL_2025.exe" -ArgumentList '/Action=Install /IAcceptSqlServerLicenseTerms /Quiet /InstallPath=C:\Data /Language=en-US' -NoNewWindow -Wait -PassThru
        Write-Host "ExitCode: $($p.ExitCode)"
      args:
        executable: powershell.exe
      register: mssql_install_result
      vars:
        ansible_connection: winrm
        ansible_user: Administrator
        ansible_password: "{{ windows_admin_password }}"
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5985
        ansible_winrm_scheme: http
        ansible_host: localhost
      when: mssql_install | default(false) | bool and installer_stat.stat.exists

    - name: Show MS SQL install result (WinRM)
      debug:
        msg:
          - "MS SQL install stdout: {{ mssql_install_result.stdout }}"
          - "MS SQL install stderr: {{ mssql_install_result.stderr }}"
      when: mssql_install | default(false) | bool

    - name: Verify SQL Server service is installed and running (WinRM)
      win_shell: |
        Get-Service -Name 'MSSQLSERVER' | Select-Object Status, Name, DisplayName
      register: mssql_service_status
      vars:
        ansible_connection: winrm
        ansible_user: Administrator
        ansible_password: "{{ windows_admin_password }}"
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_winrm_port: 5985
        ansible_winrm_scheme: http
        ansible_host: localhost
      when: mssql_install | default(false) | bool

    - name: Show SQL Server service status (WinRM)
      debug:
        var: mssql_service_status.stdout
      when: mssql_install | default(false) | bool

    - name: Show MS SQL install result (WinRM)
      debug:
        var: mssql_install_result.stdout
      when: mssql_install | default(false) | bool

    - name: Display automation summary
      ansible.builtin.debug:
        msg:
          - " Windows Automation Setup Complete!"
          - "Use inventory at /tmp/windows-inventory.yml with ansible-playbook"