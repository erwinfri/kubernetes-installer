# KubeVirt Install Tasks (moved from top-level k8s-redhat-kubevirt-install-tasks.yaml)
# Controller remains top-level; do not edit here.

# ===================================================================
# INSTALL TASKS - Fresh installation of KubeVirt
# ===================================================================

- name: Ensure kubelet is running and enabled
  ansible.builtin.systemd:
    name: kubelet
    state: started
    enabled: yes

- name: Ensure containerd is running and enabled
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: yes

- name: Display install start message
  ansible.builtin.debug:
    msg:
      - "=== Starting KubeVirt installation ==="
      - "Version: {{ kubevirt_version }}"
      - "This will install KubeVirt, CDI, and configure networking"

# === PREREQUISITES ===
- name: Ensure pip3 is installed
  ansible.builtin.package:
    name: python3-pip
    state: present

- name: Ensure kubernetes Python package is installed
  ansible.builtin.pip:
    name: kubernetes
    executable: pip3

- name: Ensure kubectl is installed
  ansible.builtin.command: which kubectl
  register: kubectl_check
  failed_when: kubectl_check.rc != 0
  changed_when: false

# === KUBEVIRT INSTALLATION ===
- name: Create KubeVirt namespace
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ kubevirt_namespace }}"
    state: present

- name: Deploy KubeVirt Operator
  kubernetes.core.k8s:
    state: present
    src: "https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/kubevirt-operator.yaml"

- name: Deploy KubeVirt CustomResource
  kubernetes.core.k8s:
    state: present
    src: "https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/kubevirt-cr.yaml"

- name: Wait for KubeVirt pods to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ kubevirt_namespace }}"
    label_selectors:
      - "kubevirt.io"
  register: kubevirt_pods
  until: kubevirt_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length >= 3
  retries: 30
  delay: 10
  failed_when: false
  ignore_errors: true

- name: Verify KubeVirt deployment status
  ansible.builtin.shell: |
    echo "=== KubeVirt Deployment Status ==="
    echo "Checking KubeVirt pods:"
    kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io --no-headers 2>/dev/null || echo "No KubeVirt pods found"
    
    echo ""
    echo "Checking KubeVirt CR status:"
    kubectl get kubevirt -n {{ kubevirt_namespace }} -o wide 2>/dev/null || echo "No KubeVirt CR found"
    
    echo ""
    running_pods=$(kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    total_pods=$(kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io --no-headers 2>/dev/null | wc -l || echo "0")
    
    echo "KubeVirt pods status: $running_pods/$total_pods Running"
    
    if [ "$running_pods" -ge 3 ]; then
      echo "✓ KubeVirt appears to be ready with $running_pods running pods"
    elif [ "$total_pods" -gt 0 ]; then
      echo "⚠ WARNING: Only $running_pods out of $total_pods KubeVirt pods are running"
    else
      echo "✗ ERROR: No KubeVirt pods found"
    fi
  register: kubevirt_status_check
  ignore_errors: true

- name: Display KubeVirt status
  ansible.builtin.debug:
    msg: "{{ kubevirt_status_check.stdout_lines }}"

# === VIRTCTL INSTALLATION ===
- name: Download virtctl binary
  ansible.builtin.get_url:
    url: "https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/virtctl-{{ kubevirt_version }}-linux-amd64"
    dest: /usr/local/bin/virtctl
    mode: '0755'

- name: Ensure virtctl is executable
  ansible.builtin.file:
    path: /usr/local/bin/virtctl
    mode: '0755'
    state: file

# === RBAC CONFIGURATION ===
- name: Create RBAC for virtctl console access
  ansible.builtin.copy:
    dest: /tmp/virtctl-console-access.yaml
    content: |
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: virtctl-console-access
        namespace: {{ kubevirt_namespace }}
      rules:
      - apiGroups: ["subresources.kubevirt.io"]
        resources: ["virtualmachineinstances/console"]
        verbs: ["get", "list", "watch"]
      ---
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: virtctl-console-access
        namespace: {{ kubevirt_namespace }}
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: {{ kubevirt_namespace }}
      roleRef:
        kind: Role
        name: virtctl-console-access
        apiGroup: rbac.authorization.k8s.io

- name: Apply RBAC for virtctl console access
  ansible.builtin.shell: kubectl apply -f /tmp/virtctl-console-access.yaml
  changed_when: false

# === NETWORKING CONFIGURATION ===
- name: Detect if firewalld is running
  ansible.builtin.shell: systemctl is-active firewalld
  register: firewalld_state
  changed_when: false
  failed_when: false

- name: Set firewalld active fact
  ansible.builtin.set_fact:
    firewalld_active: "{{ firewalld_state.stdout == 'active' }}"

- name: Note firewalld inactive (ports will not be managed via firewalld)
  ansible.builtin.debug:
    msg: "firewalld not active; skipping firewalld port/rich-rule configuration"
  when: not firewalld_active | bool

- name: Open required firewall ports for KubeVirt
  ansible.builtin.firewalld:
    port: "{{ item }}"
    permanent: true
    state: enabled
    immediate: true
  loop:
    - 6443/tcp
    - 10250/tcp
    - 2379-2380/tcp
    - 8186/tcp
    - 8472/udp
    - 49152-49215/tcp
  when: firewalld_active | bool
  ignore_errors: true

- name: Reload firewalld
  ansible.builtin.command: firewall-cmd --reload
  changed_when: false
  when: firewalld_active | bool
  ignore_errors: true

- name: Add firewalld rich rules for KubeVirt networking
  ansible.builtin.shell: |
    PRIMARY_IFACE=$(ip route show default | awk '{print $5}' | head -1)
    HOST_SUBNET=$(ip route show dev $PRIMARY_IFACE | grep -E "^[0-9]+\." | head -1 | awk '{print $1}')
    POD_SUBNET=$(kubectl get nodes -o jsonpath='{.items[0].spec.podCIDR}' 2>/dev/null || echo "10.244.0.0/16")
    echo "Adding firewalld rich rules for KubeVirt networking"
    firewall-cmd --permanent --add-rich-rule="rule family=ipv4 source address=$HOST_SUBNET destination address=$POD_SUBNET accept" 2>/dev/null || true
    firewall-cmd --permanent --add-rich-rule="rule family=ipv4 source address=$POD_SUBNET destination address=$HOST_SUBNET accept" 2>/dev/null || true
    firewall-cmd --reload
  when: firewalld_active | bool
  ignore_errors: true

- name: Add iptables rules for CNI forwarding
  ansible.builtin.shell: |
    PRIMARY_IFACE=$(ip route show default | awk '{print $5}' | head -1)
    if ip link show cni0 >/dev/null 2>&1; then
      echo "Adding iptables rules for CNI forwarding"
      iptables -C FORWARD -i $PRIMARY_IFACE -o cni0 -j ACCEPT 2>/dev/null || iptables -I FORWARD -i $PRIMARY_IFACE -o cni0 -j ACCEPT
      iptables -C FORWARD -i cni0 -o $PRIMARY_IFACE -j ACCEPT 2>/dev/null || iptables -I FORWARD -i cni0 -o $PRIMARY_IFACE -j ACCEPT
    fi
  ignore_errors: true

# === INSTALLATION VERIFICATION ===
- name: Verify installation completion
  ansible.builtin.shell: |
    echo "=== KubeVirt Installation Status ==="
    
    # Check namespace
    if kubectl get namespace {{ kubevirt_namespace }} >/dev/null 2>&1; then
      echo "✓ KubeVirt namespace exists"
    else
      echo "✗ KubeVirt namespace missing"
    fi
    
    # Check operator
    operator_pods=$(kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io=virt-operator --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    if [ "$operator_pods" -gt 0 ]; then
      echo "✓ KubeVirt operator running ($operator_pods pods)"
    else
      echo "✗ KubeVirt operator not running"
    fi
    
    # Check CR
    if kubectl get kubevirt kubevirt -n {{ kubevirt_namespace }} >/dev/null 2>/dev/null; then
      cr_status=$(kubectl get kubevirt kubevirt -n {{ kubevirt_namespace }} -o jsonpath='{.status.phase}' 2>/dev/null || echo "Unknown")
      echo "✓ KubeVirt CR exists (Status: $cr_status)"
    else
      echo "✗ KubeVirt CR missing"
    fi
    
    # Check core components
    api_pods=$(kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io=virt-api --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    controller_pods=$(kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io=virt-controller --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    handler_pods=$(kubectl get pods -n {{ kubevirt_namespace }} -l kubevirt.io=virt-handler --no-headers 2>/dev/null | grep -c "Running" || echo "0")
    
    echo "✓ Core components: API($api_pods) Controller($controller_pods) Handler($handler_pods)"
    
    # Check virtctl
    if command -v virtctl >/dev/null 2>&1; then
      virtctl_version=$(virtctl version --client --short 2>/dev/null || echo "unknown")
      echo "✓ virtctl binary installed ($virtctl_version)"
    else
      echo "✗ virtctl binary missing"
    fi
    
    echo "=== Installation verification completed ==="
  register: install_verification
  ignore_errors: true

- name: Display installation results
  ansible.builtin.debug:
    msg: "{{ install_verification.stdout_lines }}"

- name: Print next steps
  ansible.builtin.debug:
    msg:
      - "=== Next Steps ==="
      - "1. Test virtctl: virtctl version"
      - "2. Check pods: kubectl get pods -n {{ kubevirt_namespace }}"
      - "3. Deploy VMs using manifests"
      - "4. Use 'virtctl console <vm-name>' for VM console access"
      - "5. Use 'virtctl vnc <vm-name>' for VNC access"
