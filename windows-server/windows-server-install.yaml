# Windows Server 2019 Installation Tasks (moved from top-level)
# Controller remains top-level.

---
# Windows Server 2019 Installation Module
# This module handles the complete installation of Windows Server 2019 VM

- name: Pre-flight checks
  block:
    - name: Check if Windows Server 2019 VHD file exists
      ansible.builtin.stat:
        path: "{{ vhd_path | default('/root/win2019server.vhd') }}"
      register: vhd_file_check
      failed_when: not vhd_file_check.stat.exists

    - name: Display VHD file information
      ansible.builtin.debug:
        msg:
          - "Windows Server 2019 VHD found: {{ vhd_path | default('/root/win2019server.vhd') }}"
          - "Size: {{ (vhd_file_check.stat.size / 1024 / 1024 / 1024) | round(2) }} GB"

    - name: Ensure KubeVirt namespace exists
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ kubevirt_namespace }}"
        state: present

    - name: Check if KubeVirt is deployed and ready
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: KubeVirt
        name: kubevirt
        namespace: "{{ kubevirt_namespace }}"
      register: kubevirt_status
      failed_when:
        - kubevirt_status.resources | length == 0 or
          kubevirt_status.resources[0].status.phase != "Deployed"

    - name: Display KubeVirt status
      ansible.builtin.debug:
        msg: "✅ KubeVirt is ready: {{ kubevirt_status.resources[0].status.phase }}"

- name: Check for existing installation
  block:
    - name: Check if Windows Server VM already exists
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ vm_name }}"
        namespace: "{{ kubevirt_namespace }}"
      register: existing_vm

    - name: Display existing installation warning
      ansible.builtin.debug:
        msg:
          - "⚠️  WARNING: Windows Server 2019 VM already exists!"
          - "Status: {{ existing_vm.resources[0].status.printableStatus | default('Unknown') }}"
          - "Proceeding with installation anyway - this may cause conflicts"
      when: existing_vm.resources | length > 0

- name: Storage preparation
  block:
    - name: Ensure qemu-img is installed
      ansible.builtin.package:
        name: qemu-img
        state: present

    - name: Ensure parted is installed (for partition table detection)
      ansible.builtin.package:
        name: parted
        state: present

    - name: Detect source VHD format (vhd/vpc vs vhdx)
      ansible.builtin.shell: |
        SRC={{ vhd_path | default('/root/win2019server.vhd') }}
        fmt=$(qemu-img info "$SRC" 2>/dev/null | awk -F': ' '/file format/ {print $2}')
        case "$fmt" in
          vhd) echo vpc ;;
          vpc) echo vpc ;;
          vhdx) echo vhdx ;;
          *) echo unknown ;;
        esac
      args:
        executable: /bin/bash
      register: vhd_src_fmt
      changed_when: false

    - name: Set qemu-img source format fact
      ansible.builtin.set_fact:
        qemu_src_fmt: "{{ 'vhdx' if vhd_src_fmt.stdout == 'vhdx' else 'vpc' }}"

    - name: Create base storage directory
      ansible.builtin.file:
        path: "{{ storage_dir }}"
        state: directory
        mode: '0755'

    - name: Check available disk space
      ansible.builtin.shell: |
        df -h {{ storage_dir }} | tail -1 | awk '{print $4}'
      register: available_space
      changed_when: false

    - name: Display storage information
      ansible.builtin.debug:
        msg:
          - "📁 Storage directory: {{ storage_dir }}"
          - "💾 Available space: {{ available_space.stdout }}"
          - "📊 Required space: ~{{ system_disk_size }} (system) + {{ installer_disk_size | default('12Gi') }} (installer request)"

    - name: Create directory structure for storage
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ storage_dir }}/win2019server-system-disk"
        - "{{ storage_dir }}/win2019server-installer"
        - "{{ storage_dir }}/win2019server-virtio-iso"

    - name: Create blank system disk image (50Gi by default)
      ansible.builtin.shell: |
        DST={{ storage_dir }}/win2019server-system-disk/disk.img
        if [ -f "$DST" ]; then
          echo "System disk already exists: $DST"
        else
          qemu-img create -f raw "$DST" {{ system_disk_size | default('50Gi') }}
          echo "Created blank system disk: $DST (size={{ system_disk_size | default('50Gi') }})"
        fi
      register: system_disk_result

    - name: Prepare installer VHD as separate disk (convert to raw) with correct source format
      ansible.builtin.shell: |
        DST={{ storage_dir }}/win2019server-installer/disk.img
        SRC={{ vhd_path | default('/root/win2019server.vhd') }}
        if [ -f "$DST" ]; then
          echo "Installer disk already prepared: $DST"
        else
          echo "Converting with source format: {{ qemu_src_fmt }}"
          qemu-img convert -f {{ qemu_src_fmt }} -O raw "$SRC" "$DST"
          echo "Prepared installer disk from VHD: $DST"
        fi
      register: installer_disk_result

    - name: Detect partition table on converted installer disk (GPT vs MBR)
      ansible.builtin.shell: |
        DST={{ storage_dir }}/win2019server-installer/disk.img
        if [ -f "$DST" ]; then
          part="$(parted -s "$DST" print 2>/dev/null | awk -F': ' '/Partition Table/ {print tolower($2)}')"
          if [ -z "$part" ]; then echo unknown; else echo "$part"; fi
        else
          echo missing
        fi
      args:
        executable: /bin/bash
      register: installer_ptable
      changed_when: false

    - name: Decide boot mode based on partition table (EFI for GPT, BIOS for msdos)
      ansible.builtin.set_fact:
        boot_mode: "{{ 'efi' if installer_ptable.stdout == 'gpt' else 'bios' }}"

    - name: Compute VM bootloader structure (as JSON for safe insertion)
      ansible.builtin.set_fact:
        vm_bootloader_json: "{{ ({'efi': {'efi': {'secureBoot': False}}, 'bios': {'bios': {}}})[boot_mode | default('efi')] | to_json }}"

    - name: Set default VirtIO ISO download URL when not provided
      ansible.builtin.set_fact:
        virtio_iso_download_url: "{{ virtio_iso_url | default('https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso') }}"
      when: virtio_iso_path is not defined

    - name: Download VirtIO driver ISO (latest) if no local path provided
      ansible.builtin.get_url:
        url: "{{ virtio_iso_download_url }}"
        dest: "{{ storage_dir }}/win2019server-virtio-iso/disk.img"
        mode: '0644'
      when: virtio_iso_path is not defined

    - name: Copy VirtIO driver ISO (requires virtio_iso_path variable)
      ansible.builtin.copy:
        src: "{{ virtio_iso_path }}"
        dest: "{{ storage_dir }}/win2019server-virtio-iso/disk.img"
        mode: '0644'
      when: virtio_iso_path is defined

    - name: Display disk creation result
      ansible.builtin.debug:
        msg:
          - "{{ system_disk_result.stdout }}"
          - "{{ installer_disk_result.stdout }}"
          - "Detected source VHD format: {{ qemu_src_fmt }}"
          - "Detected installer partition table: {{ installer_ptable.stdout }}"
          - "Selected boot mode: {{ boot_mode | default('efi') }}"

- name: Create unattended installation files
  block:
    - name: Create Install-VirtIO.ps1 script (used during setup and as fallback)
      ansible.builtin.copy:
        dest: "{{ storage_dir }}/Install-VirtIO.ps1"
        mode: '0644'
        content: |
          # Install VirtIO drivers for Windows Server 2019
          $ErrorActionPreference = 'Continue'
          $log = 'C:\\Windows\\Temp\\virtio-install.log'
          try { Start-Transcript -Path $log -Append -ErrorAction SilentlyContinue | Out-Null } catch {}

          function Get-VirtioRoot {
            # Prefer explicit D: mapping when available
            if (Test-Path 'D:\\NetKVM') { return 'D:\\' }
            $deadline = (Get-Date).AddMinutes(5)
            do {
              $vol = Get-WmiObject Win32_Volume |
                Where-Object { $_.DriveType -eq 5 -and ($_.Label -match 'virtio' -or $_.Label -match 'VIRTIO') } |
                Select-Object -First 1
              if ($vol -and $vol.DriveLetter) { return ($vol.DriveLetter + '\\') }
              foreach ($l in 'D'..'Z') {
                $root = "$l:\\"
                if (Test-Path (Join-Path $root 'NetKVM')) { return $root }
              }
              Start-Sleep -Seconds 5
            } while ((Get-Date) -lt $deadline)
            return $null
          }

          $root = Get-VirtioRoot
          if (-not $root) {
            Write-Host 'VirtIO ISO not found.'
          } else {
            Write-Host "Using VirtIO root: $root"
            # Prefer NetKVM first to enable networking (try direct INF with pnputil)
            $nkCandidates = @(
              (Join-Path $root 'NetKVM\2k19\amd64\netkvm.inf')
              # Windows 2019 only; removed w10 path
            )
            foreach ($nk in $nkCandidates) {
              if (Test-Path $nk) {
                Write-Host "Installing NetKVM from $nk"
                pnputil /add-driver "$nk" /install
                if ($LASTEXITCODE -ne 0) { Write-Host "pnputil returned $LASTEXITCODE for NetKVM" }
                break
              }
            }

            # Install a curated set of VirtIO drivers using pnputil; fall back to DISM recurse
            $driverDirs = @('vioscsi','viostor','Balloon','vioinput','viorng','pvpanic','qxl','qxldod','vioser','NetKVM')
            foreach ($d in $driverDirs) {
              $paths = @(
                Join-Path $root ($d + '\\2k19\\amd64')
                # Windows 2019 only; removed w10 path
              )
              foreach ($p in $paths) {
                if (Test-Path $p) {
                  Write-Host "Installing drivers from $p"
                  pnputil /add-driver (Join-Path $p '*.inf') /subdirs /install
                  break
                }
              }
            }

            # Final sweep with DISM in case anything was missed
            Write-Host "Final DISM sweep under $root"
            & dism.exe /online /add-driver /driver:"$root" /recurse
          }
          try { pnputil /scan-devices } catch {}
          try { Stop-Transcript } catch {}

    - name: Create SetupComplete.cmd (fallback to ensure drivers installation runs at end of setup)
      ansible.builtin.copy:
        dest: "{{ storage_dir }}/SetupComplete.cmd"
        mode: '0644'
        content: |
          @echo off
          REM Ensure target folder exists
          if not exist C:\\Windows\\Setup\\Scripts mkdir C:\\Windows\\Setup\\Scripts
          REM Copy script locally for reliability
          copy /Y %SystemDrive%\\Windows\\Temp\\Install-VirtIO.ps1 nul 2>nul
          if %ERRORLEVEL% NEQ 0 (
              if exist D:\\Install-VirtIO.ps1 copy /Y D:\\Install-VirtIO.ps1 C:\\Windows\\Temp\\Install-VirtIO.ps1
          )
          powershell -NoProfile -ExecutionPolicy Bypass -File C:\\Windows\\Temp\\Install-VirtIO.ps1

    - name: Create Autounattend.xml for automated installation
      ansible.builtin.copy:
        dest: "{{ storage_dir }}/Autounattend.xml"
        mode: '0644'
        content: |
          <?xml version="1.0" encoding="utf-8"?>
          <unattend xmlns="urn:schemas-microsoft-com:unattend">
            <settings pass="oobeSystem">
              <component xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         name="Microsoft-Windows-International-Core"
                         processorArchitecture="amd64"
                         publicKeyToken="31bf3856ad364e35"
                         language="neutral"
                         versionScope="nonSxS">
                <InputLocale>en-US</InputLocale>
                <SystemLocale>en-US</SystemLocale>
                <UILanguage>en-US</UILanguage>
                <UserLocale>en-US</UserLocale>
              </component>
              <component xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         name="Microsoft-Windows-Shell-Setup"
                         processorArchitecture="amd64"
                         publicKeyToken="31bf3856ad364e35"
                         language="neutral"
                         versionScope="nonSxS">
                <TimeZone>UTC</TimeZone>
                <UserAccounts>
                  <AdministratorPassword>
                    <Value>{{ windows_admin_password }}</Value>
                    <PlainText>true</PlainText>
                  </AdministratorPassword>
                </UserAccounts>
                <AutoLogon>
                  <Enabled>true</Enabled>
                  <LogonCount>3</LogonCount>
                  <Domain>.</Domain>
                  <Username>Administrator</Username>
                  <Password>
                    <Value>{{ windows_admin_password }}</Value>
                    <PlainText>true</PlainText>
                  </Password>
                </AutoLogon>
                <OOBE>
                  <HideEULAPage>true</HideEULAPage>
                </OOBE>
                <FirstLogonCommands>
                  <SynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <Description>Install VirtIO NetKVM Driver</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\NetKVM\2k19\amd64\netkvm.inf (echo Installing NetKVM from D:\NetKVM\2k19\amd64\netkvm.inf &amp; pnputil /add-driver D:\NetKVM\2k19\amd64\netkvm.inf /install &amp; pnputil /scan-devices)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>2</Order>
                    <Description>Install VirtIO RNG (viorng)</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\viorng\2k19\amd64\viorng.inf (echo Installing VirtIO RNG drivers &amp; pnputil /add-driver D:\viorng\2k19\amd64\viorng.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>3</Order>
                    <Description>Install VirtIO Balloon Driver</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\Balloon\2k19\amd64\balloon.inf (echo Installing VirtIO Balloon drivers &amp; pnputil /add-driver D:\Balloon\2k19\amd64\balloon.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>4</Order>
                    <Description>Install VirtIO Serial Driver</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\vioserial\2k19\amd64\vioser.inf (echo Installing VirtIO Serial drivers &amp; pnputil /add-driver D:\vioserial\2k19\amd64\vioser.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>5</Order>
                    <Description>Install VirtIO SCSI Driver</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\vioscsi\2k19\amd64\vioscsi.inf (echo Installing VirtIO SCSI drivers &amp; pnputil /add-driver D:\vioscsi\2k19\amd64\vioscsi.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>6</Order>
                    <Description>Install VirtIO Input (Tablet/HID) Driver</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\vioinput\2k19\amd64\vioinput.inf (echo Installing VirtIO Input drivers &amp; pnputil /add-driver D:\vioinput\2k19\amd64\vioinput.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>7</Order>
                    <Description>Install VirtIO GPU DOD Driver</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\viogpu\2k19\amd64\viogpudo.inf (echo Installing VirtIO GPU DOD driver &amp; pnputil /add-driver D:\viogpu\2k19\amd64\viogpudo.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>8</Order>
                    <Description>Install Remaining VirtIO Drivers (bulk)</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>cmd /c if exist D:\ (for %%D in (viostor viofs viosock qxl pvpanic) do if exist D:\%%D\2k19\amd64\*.inf pnputil /add-driver D:\%%D\2k19\amd64\*.inf /install)</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>9</Order>
                    <Description>Enable Remote Desktop</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>10</Order>
                    <Description>Allow RDP through firewall</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>netsh advfirewall firewall set rule group="remote desktop" new enable=Yes</CommandLine>
                  </SynchronousCommand>
                  <SynchronousCommand wcm:action="add">
                    <Order>11</Order>
                    <Description>Enable WinRM</Description>
                    <RequiresUserInput>false</RequiresUserInput>
                    <CommandLine>winrm quickconfig -quiet</CommandLine>
                  </SynchronousCommand>
                </FirstLogonCommands>
              </component>
            </settings>
          </unattend>

    - name: Load Autounattend.xml content
      ansible.builtin.slurp:
        src: "{{ storage_dir }}/Autounattend.xml"
      register: unattend_slurped

    - name: Load Install-VirtIO.ps1 content
      ansible.builtin.slurp:
        src: "{{ storage_dir }}/Install-VirtIO.ps1"
      register: install_ps1_slurped

    - name: Load SetupComplete.cmd content
      ansible.builtin.slurp:
        src: "{{ storage_dir }}/SetupComplete.cmd"
      register: setupcomplete_slurped

    - name: Create Sysprep Secret with unattend files
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: win2019server-sysprep
            namespace: "{{ kubevirt_namespace }}"
          type: Opaque
          data:
            Autounattend.xml: "{{ unattend_slurped.content }}"
            Unattend.xml: "{{ unattend_slurped.content }}"
            unattend.xml: "{{ unattend_slurped.content }}"
            Install-VirtIO.ps1: "{{ install_ps1_slurped.content }}"
            SetupComplete.cmd: "{{ setupcomplete_slurped.content }}"

    - name: Display unattend configuration
      ansible.builtin.debug:
        msg:
          - "📋 Unattend.xml Configuration:"
          - "  - Administrator Password: {{ windows_admin_password }}"
          - "  - Sysprep Secret: win2019server-sysprep (Autounattend.xml)"

- name: Create Kubernetes storage resources
  block:
    - name: Create local storage class
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
          provisioner: kubernetes.io/no-provisioner
          volumeBindingMode: WaitForFirstConsumer
          reclaimPolicy: Retain

    - name: Get node hostname for affinity
      ansible.builtin.shell: kubectl get nodes -o jsonpath='{.items[0].metadata.name}'
      register: node_hostname
      changed_when: false

    - name: Create PersistentVolumes
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: "{{ item.name }}"
            labels:
              type: local
              app: win2019server
          spec:
            capacity:
              storage: "{{ item.size }}"
            accessModes: "{{ item.access_modes }}"
            persistentVolumeReclaimPolicy: Retain
            storageClassName: local-storage
            volumeMode: Filesystem
            hostPath:
              path: "{{ storage_dir }}/{{ item.path }}"
              type: Directory
            nodeAffinity:
              required:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: In
                    values: ["{{ node_hostname.stdout }}"]
      loop:
        - { name: "win2019server-installer-pv", size: "{{ installer_disk_size | default('12Gi') }}", access_modes: ["ReadWriteOnce"], path: "win2019server-installer" }
        - { name: "win2019server-system-pv", size: "{{ system_disk_size }}", access_modes: ["ReadWriteOnce"], path: "win2019server-system-disk" }
        - { name: "win2019server-virtio-iso-pv", size: "{{ virtio_iso_size | default('1Gi') }}", access_modes: ["ReadOnlyMany"], path: "win2019server-virtio-iso" }

    - name: Create PersistentVolumeClaims
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ item.name }}"
            namespace: "{{ kubevirt_namespace }}"
          spec:
            accessModes: "{{ item.access_modes }}"
            resources:
              requests:
                storage: "{{ item.size }}"
            storageClassName: local-storage
            volumeMode: Filesystem
      loop:
        - { name: "win2019server-installer-pvc", size: "{{ installer_disk_size | default('12Gi') }}", access_modes: ["ReadWriteOnce"] }
        - { name: "win2019server-system-pvc", size: "{{ system_disk_size }}", access_modes: ["ReadWriteOnce"] }
        - { name: "win2019server-virtio-iso-pvc", size: "{{ virtio_iso_size | default('1Gi') }}", access_modes: ["ReadOnlyMany"] }

- name: Deploy Windows Server VM
  block:
    - name: Create Windows Server 2019 VirtualMachine
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: kubevirt.io/v1
          kind: VirtualMachine
          metadata:
            name: "{{ vm_name }}"
            namespace: "{{ kubevirt_namespace }}"
            labels:
              app: win2019server
              os: windows
              version: "2019"
          spec:
            runStrategy: RerunOnFailure
            template:
              metadata:
                labels:
                  kubevirt.io/vm: "{{ vm_name }}"
                  os: windows
                  version: "2019"
              spec:
                domain:
                  cpu:
                    cores: "{{ vm_cpu_cores }}"
                    model: "{{ vm_cpu_model | default('host-model') }}"
                  memory:
                    guest: "{{ vm_memory }}"
                  machine:
                    type: q35
                  features:
                    acpi: { enabled: true }
                    apic: { enabled: true }
                    hyperv:
                      relaxed: { enabled: true }
                      vapic: { enabled: true }
                      spinlocks: { enabled: true, retries: 8191 }
                      vpindex: { enabled: true }
                      runtime: { enabled: true }
                      synic: { enabled: true }
                      stimer: { enabled: true }
                      reset: { enabled: true }
                      frequencies: { enabled: true }
                  firmware:
                    bootloader: "{{ vm_bootloader_json | from_json }}"
                  devices:
                    bootMenu:
                      enabled: true
                    autoattachPodInterface: false
                    autoattachSerialConsole: true
                    autoattachGraphicsDevice: true
                    rng: {}
                    disks:
                    - name: installer-vhd
                      disk: { bus: sata }
                      bootOrder: 1
                    - name: system-disk
                      disk: { bus: sata }
                      bootOrder: 2
                    - name: virtio-iso
                      cdrom: { bus: sata }
                      bootOrder: 3
                    - name: sysprep
                      cdrom: { bus: sata }
                      bootOrder: 4
                    interfaces:
                    - name: default
                      masquerade: {}
                      model: virtio
                    inputs:
                    - type: tablet
                      bus: usb
                    video:
                    - name: video0
                      device:
                        name: virtio
                  resources:
                    requests:
                      memory: "{{ vm_memory }}"
                      cpu: "{{ vm_cpu_cores }}"
                networks:
                - name: default
                  pod: {}
                volumes:
                - name: installer-vhd
                  persistentVolumeClaim: { claimName: win2019server-installer-pvc }
                - name: system-disk
                  persistentVolumeClaim: { claimName: win2019server-system-pvc }
                - name: virtio-iso
                  persistentVolumeClaim: { claimName: win2019server-virtio-iso-pvc }
                - name: sysprep
                  sysprep:
                    secret:
                      name: win2019server-sysprep

    - name: Create VNC access service
      tags: [access_services]
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: win2019server-vnc
            namespace: "{{ kubevirt_namespace }}"
            labels:
              app: win2019server
          spec:
            type: NodePort
            selector:
              kubevirt.io/vm: "{{ vm_name }}"
            ports:
              - name: vnc
                port: 5900
                targetPort: 5900
                protocol: TCP
                nodePort: 30001
 
    - name: Verify installation
      block:
        - name: Wait for VM to be created
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachine
            namespace: "{{ kubevirt_namespace }}"
          register: deployed_vm
          until: deployed_vm.resources | length > 0
          retries: 10

        - name: Wait for VM to start
          kubernetes.core.k8s_info:
            api_version: kubevirt.io/v1
            kind: VirtualMachineInstance
            name: "{{ vm_name }}"
            namespace: "{{ kubevirt_namespace }}"
          register: vmi_status
          until:
            - vmi_status.resources | length > 0
            - vmi_status.resources[0].status.phase in ["Running", "Scheduled"]
          retries: 30
          delay: 10
          
        - name: Display installation results
          ansible.builtin.debug:
            msg:
              - "🎉 Windows Server 2019 VM Installation Complete!"
              - ""
              - "📊 Status Information:"
              - "  VM Status: {{ deployed_vm.resources[0].status.printableStatus | default('Created') }}"
              - "  VMI Phase: {{ vmi_status.resources[0].status.phase | default('Pending') }}"
              - "  Node: {{ vmi_status.resources[0].status.nodeName | default('Not assigned') }}"
              - "  IP: {{ vmi_status.resources[0].status.interfaces[0].ipAddress | default('Not assigned') }}"
              - ""
              - "🔐 Access Information:"
              - "  Administrator Password: {{ windows_admin_password }}"
              - "  VNC Access: virtctl vnc {{ vm_name }} -n {{ kubevirt_namespace }}"
              - "  Console Access: virtctl console {{ vm_name }} -n {{ kubevirt_namespace }}"
              - "  VNC NodePort: 30001 (if NodePort allowed through firewall)"
              - ""
              - "📁 Storage Configuration:"
              - "  Installer VHD: {{ storage_dir }}/win2019server-installer/disk.img (boot)"
              - "  System Disk: {{ storage_dir }}/win2019server-system-disk/disk.img (blank {{ system_disk_size }})"
              - "  VirtIO ISO: {{ storage_dir }}/win2019server-virtio-iso/disk.img"
              - "  Sysprep: Secret win2019server-sysprep (Autounattend.xml)"
              - ""
              - "🛠 Next Steps:"
              - "1. Access VM via VNC to monitor Windows installation"
              - "2. Installation should proceed automatically with unattend.xml"
              - "3. Login with Administrator/{{ windows_admin_password }} after installation"
