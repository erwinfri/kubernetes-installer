---
- name: Install KubeVirt on existing Kubernetes node
  hosts: localhost
  become: yes
  vars:
    kubevirt_version: v1.2.0
    kubevirt_namespace: kubevirt
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Ensure pip3 is installed
      ansible.builtin.package:
        name: python3-pip
        state: present

    - name: Ensure kubernetes Python package is installed
      ansible.builtin.pip:
        name: kubernetes
        executable: pip3

    - name: Ensure kubectl is installed
      ansible.builtin.command: which kubectl
      register: kubectl_check
      failed_when: kubectl_check.rc != 0
      changed_when: false

    - name: Create KubeVirt namespace
      kubernetes.core.k8s:
        api_version: v1
        kind: Namespace
        name: "{{ kubevirt_namespace }}"
        state: present

    - name: Deploy KubeVirt Operator
      kubernetes.core.k8s:
        state: present
        src: "https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/kubevirt-operator.yaml"

    - name: Deploy KubeVirt CustomResource
      kubernetes.core.k8s:
        state: present
        src: "https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/kubevirt-cr.yaml"

    - name: Wait for KubeVirt pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ kubevirt_namespace }}"
      register: kubevirt_pods
      until: kubevirt_pods.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0
      retries: 20
      delay: 15

    - name: Download virtctl binary
      ansible.builtin.get_url:
        url: "https://github.com/kubevirt/kubevirt/releases/download/{{ kubevirt_version }}/virtctl-{{ kubevirt_version }}-linux-amd64"
        dest: /usr/local/bin/virtctl
        mode: '0755'

    - name: Ensure virtctl is executable
      ansible.builtin.file:
        path: /usr/local/bin/virtctl
        mode: '0755'
        state: file

    - name: Create RBAC for virtctl console access
      ansible.builtin.copy:
        dest: /tmp/virtctl-console-access.yaml
        content: |
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: virtctl-console-access
            namespace: {{ kubevirt_namespace }}
          rules:
          - apiGroups: ["subresources.kubevirt.io"]
            resources: ["virtualmachineinstances/console"]
            verbs: ["get", "list", "watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: virtctl-console-access
            namespace: {{ kubevirt_namespace }}
          subjects:
          - kind: ServiceAccount
            name: default
            namespace: {{ kubevirt_namespace }}
          roleRef:
            kind: Role
            name: virtctl-console-access
            apiGroup: rbac.authorization.k8s.io

    - name: Apply RBAC for virtctl console access
      ansible.builtin.shell: kubectl apply -f /tmp/virtctl-console-access.yaml
      changed_when: false

    # Optionally, print a message about networking requirements
    - name: Print networking requirements
      ansible.builtin.debug:
        msg: |
          Ensure pod-to-pod networking is working and port 8186 is reachable between pods and nodes.
          If you have issues with 'no route to host', check your CNI, firewall, and network policies.

    - name: Open required firewall ports for Kubernetes and KubeVirt
      ansible.builtin.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: true
      loop:
        - 6443/tcp
        - 10250/tcp
        - 2379-2380/tcp
        - 8186/tcp
        - 8472/udp
        - 49152-49215/tcp

    #- name: Add cni0 interface to firewalld public zone
    #  ansible.builtin.command: firewall-cmd --zone=public --add-interface=cni0 --permanent
    #  ignore_errors: true

    #- name: Remove cni0 interface from firewalld public zone
    #  ansible.builtin.command: firewall-cmd --zone=public --remove-interface=cni0 --permanent
    #  ignore_errors: true

    - name: Reload firewalld
      ansible.builtin.command: firewall-cmd --reload
      changed_when: false