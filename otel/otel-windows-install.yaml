---
# Tasks to configure Windows Server telemetry using the Prometheus scrape model

- name: Assert Windows telemetry inputs
  ansible.builtin.assert:
    that:
      - windows_vm_name | default('') | length > 0
      - windows_vm_namespace | default('') | length > 0
    fail_msg: "windows_vm_name and windows_vm_namespace must be provided when enabling the Windows telemetry component."

- name: Assert Windows credentials and OTLP destination provided
  ansible.builtin.assert:
    that:
      - windows_admin_username | default('') | length > 0
      - windows_otel_endpoint | default('') | length > 0
      - windows_otel_token | default('') | length > 0
    fail_msg: "windows_admin_username, windows_otel_endpoint, and windows_otel_token are required for the Windows telemetry component."
  no_log: true

- name: Ensure Windows OTLP token is unique across pipelines
  ansible.builtin.assert:
    that:
      - (redhat_otel_token | default('') | length == 0) or (windows_otel_token != redhat_otel_token)
      - (vault_otel_token | default('') | length == 0) or (windows_otel_token != vault_otel_token)
      - (oracle_otel_token | default('') | length == 0) or (windows_otel_token != oracle_otel_token)
      - (mssql_otel_token | default('') | length == 0) or (windows_otel_token != mssql_otel_token)
    fail_msg: "windows_otel_token must be unique and must not reuse the OTLP tokens assigned to other telemetry pipelines (redhat, vault, oracle, or mssql)."
  when: windows_otel_token | default('') | length > 0
  no_log: true

- name: Set Windows exporter defaults
  ansible.builtin.set_fact:
    windows_exporter_version: "{{ windows_exporter_version | default('0.31.3') }}"
    windows_exporter_port: "{{ (windows_exporter_port | default(9182)) | int }}"
    enable_sql_collector: "{{ enable_sql_collector | default(false) | bool }}"
    windows_exporter_metrics_path: "{{ windows_exporter_metrics_path | default('/metrics') }}"
    windows_exporter_flag_mode: "{{ windows_exporter_flag_mode | default('auto') | lower }}"

- name: Capture Windows extra collectors input
  ansible.builtin.set_fact:
    windows_extra_collectors_raw: "{{ windows_extra_collectors | default([]) }}"

- name: Parse Windows extra collectors when provided as string
  ansible.builtin.set_fact:
    windows_extra_collectors_list: "{{ windows_extra_collectors_raw | from_yaml }}"
  when:
    - windows_extra_collectors_raw is string
    - windows_extra_collectors_raw | trim | length > 0

- name: Use Windows extra collectors when provided as list
  ansible.builtin.set_fact:
    windows_extra_collectors_list: "{{ windows_extra_collectors_raw }}"
  when:
    - windows_extra_collectors_raw is sequence
    - windows_extra_collectors_raw is not string

- name: Ensure Windows extra collectors list structure
  ansible.builtin.set_fact:
    windows_extra_collectors_list: "{{ [windows_extra_collectors_list] if windows_extra_collectors_list is string else windows_extra_collectors_list }}"
  when: windows_extra_collectors_list is defined

- name: Ensure Windows extra collectors default to empty list
  ansible.builtin.set_fact:
    windows_extra_collectors_list: "{{ windows_extra_collectors_list | default([]) }}"

- name: Default Windows admin password Vault path when unset
  ansible.builtin.set_fact:
    windows_admin_password_vault_path: "secret/data/windows-server-2025/admin"
  when: (windows_admin_password_vault_path | default('', true) | trim | length) == 0

- name: Probe Vault connectivity for Windows credential lookup
  ansible.builtin.uri:
    url: "{{ vault_addr | regex_replace('/+$', '') }}/v1/sys/health"
    method: GET
    status_code: [200, 202, 204, 429, 472, 473, 503]
    return_content: false
    timeout: 5
  register: windows_vault_health
  failed_when: false
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0

- name: Normalize Vault address for Windows credential lookup
  ansible.builtin.set_fact:
    windows_vault_addr_normalized: "{{ vault_addr | default('http://localhost:8200') | regex_replace('/+$', '') }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0

- name: Record Vault health probe status for Windows credentials
  ansible.builtin.set_fact:
    windows_vault_health_status: "{{ windows_vault_health.status | default(-1) }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0

- name: Determine if Vault port-forward is required for Windows credentials
  ansible.builtin.set_fact:
    windows_vault_portforward_required: >-
      {{
        (windows_vault_health_status | default(-1) | int) == -1
        and (windows_vault_addr_normalized in ['http://127.0.0.1:8200', 'https://127.0.0.1:8200', 'http://localhost:8200', 'https://localhost:8200'])
      }}
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0

- name: Start Vault port-forward for Windows credential lookup
  ansible.builtin.command:
    cmd: "{{ playbook_dir }}/library/start_portforward.sh vault 8200 {{ vault_namespace | default('default', true) | default('default') }} {{ windows_vault_portforward_log }} {{ windows_vault_portforward_pid }}"
  async: 10
  poll: 0
  changed_when: false
  when: windows_vault_portforward_required | default(false)
  vars:
    windows_vault_portforward_log: "/tmp/vault-portforward-otel.log"
    windows_vault_portforward_pid: "/tmp/vault-portforward-otel.pid"

- name: Wait for Vault port-forward readiness
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 8200
    delay: 2
    timeout: 30
  when: windows_vault_portforward_required | default(false)

- name: Mark Vault port-forward as started
  ansible.builtin.set_fact:
    windows_vault_portforward_started: true
    windows_vault_portforward_log: "/tmp/vault-portforward-otel.log"
    windows_vault_portforward_pid: "/tmp/vault-portforward-otel.pid"
  when: windows_vault_portforward_required | default(false)

- name: Resolve Windows admin password from Vault when needed
  ansible.builtin.set_fact:
    windows_vault_token_effective: >-
      {{
        (vault_token | default('') | trim)
        if (vault_token | default('') | trim | length > 0)
        else (
          (lookup('env', 'VAULT_TOKEN') | default('') | trim)
          if (lookup('env', 'VAULT_TOKEN') | default('') | trim | length > 0)
          else (lookup('file', '/root/.vault-token', errors='ignore') | default('') | trim)
        )
      }}
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Determine Vault field for Windows admin password
  ansible.builtin.set_fact:
    windows_admin_password_vault_field: "{{ windows_admin_password_vault_field | default('password') }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0

- name: Validate Vault parameters for Windows credential lookup
  ansible.builtin.assert:
    that:
      - windows_vault_token_effective | default('') | length > 0
      - vault_addr | default('') | length > 0
    fail_msg: "Provide vault_addr and vault_token (or set VAULT_TOKEN) when windows_admin_password_vault_path is specified."
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Prepare Vault request headers for Windows credential lookup
  ansible.builtin.set_fact:
    windows_vault_request_headers:
      X-Vault-Token: "{{ windows_vault_token_effective }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Add Vault namespace header when provided
  ansible.builtin.set_fact:
    windows_vault_request_headers: "{{ windows_vault_request_headers | combine({'X-Vault-Namespace': vault_namespace}) }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
    - vault_namespace | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Retrieve Windows admin password from Vault
  ansible.builtin.uri:
    url: "{{ (windows_vault_addr_normalized | default(vault_addr)) | regex_replace('/+$', '') }}/v1/{{ windows_admin_password_vault_path | regex_replace('^/+', '') }}"
    method: GET
    headers: "{{ windows_vault_request_headers }}"
    status_code: [200, 400, 401, 403, 404, 500]
    return_content: true
    validate_certs: "{{ vault_validate_certs | default(false) | bool }}"
    timeout: 20
  register: windows_admin_password_lookup
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Extract Vault payload for Windows credential lookup (KV v2)
  ansible.builtin.set_fact:
    windows_admin_password_payload: "{{ (windows_admin_password_lookup.json | default({})).get('data', {}).get('data', {}) }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
    - windows_admin_password_lookup.status | default(0) | int == 200
    - ((windows_admin_password_lookup.json | default({})).get('data', {}).get('data')) is mapping

- name: Extract Vault payload for Windows credential lookup (KV v1 fallback)
  ansible.builtin.set_fact:
    windows_admin_password_payload: "{{ (windows_admin_password_lookup.json | default({})).get('data', {}) }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
    - windows_admin_password_lookup.status | default(0) | int == 200
    - (windows_admin_password_payload is not defined) or (windows_admin_password_payload | length == 0)

- name: Capture Vault secret keys for diagnostics
  ansible.builtin.set_fact:
    windows_admin_password_vault_keys: "{{ (windows_admin_password_payload or {}).keys() | list | sort }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
    - windows_admin_password_payload is defined

- name: Show Vault secret keys when Windows debug enabled
  ansible.builtin.debug:
    msg: "Vault secret '{{ windows_admin_password_vault_path }}' keys: {{ windows_admin_password_vault_keys }}"
  when:
    - otel_windows_debug | default(false)
    - windows_admin_password_vault_keys is defined

- name: Surface Vault retrieval failures for Windows credentials
  ansible.builtin.fail:
    msg: >-
      Vault request to '{{ windows_admin_password_vault_path }}' returned HTTP {{ windows_admin_password_lookup.status | default('unknown') }}.
      Check that the token/namespace grant access and that the secret path exists.
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
    - windows_admin_password_lookup.status | default(0) | int != 200

- name: Set Windows admin password from Vault
  ansible.builtin.set_fact:
    windows_admin_password: "{{ (windows_admin_password_payload or {}).get(windows_admin_password_vault_field, '') | trim }}"
    windows_admin_password_source: "vault:{{ windows_admin_password_vault_path }}"
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Validate password value retrieved from Vault
  ansible.builtin.assert:
    that:
      - windows_admin_password | default('') | length > 0
    fail_msg: >-
      Vault secret '{{ windows_admin_password_vault_path }}' did not contain field '{{ windows_admin_password_vault_field }}'.
      Available keys: {{ windows_admin_password_vault_keys | default([]) }}.
      Set windows_admin_password_vault_field to the correct field name if the secret uses a different key.
  when:
    - windows_admin_password | default('') | length == 0
    - windows_admin_password_vault_path | default('') | length > 0
  no_log: "{{ not (otel_windows_debug | default(false)) }}"

- name: Record Windows admin credential source
  ansible.builtin.set_fact:
    windows_admin_password_source: "provided"
  when:
    - windows_admin_password | default('') | length > 0
    - windows_admin_password_source is not defined
  no_log: true

- name: Ensure Windows admin password is available
  ansible.builtin.assert:
    that:
      - windows_admin_password | default('') | length > 0
    fail_msg: "windows_admin_password must be provided directly or via windows_admin_password_vault_path."
  no_log: true

- name: Prepare Windows telemetry identifiers
  ansible.builtin.set_fact:
    windows_collector_name: "{{ windows_vm_name }}"
    windows_collector_slug: "{{ (windows_vm_name | lower | regex_replace('[^a-z0-9]+', '-') ) | regex_replace('^-+|-+$', '') }}"
    windows_env_prefix: "{{ windows_env_prefix_value }}"
    windows_env_endpoint_var: "{{ windows_env_prefix_value }}_OTEL_ENDPOINT"
    windows_env_token_var: "{{ windows_env_prefix_value }}_OTEL_TOKEN"
    windows_portforward_service: "{{ windows_vm_name }}-winrm-https"
    windows_portforward_log: "/tmp/winrm-{{ windows_vm_name | lower }}-https.log"
    windows_portforward_pid: "/tmp/winrm-{{ windows_vm_name | lower }}-https.pid"
  vars:
    windows_env_prefix_value: "WINDOWS_{{ windows_vm_name | upper | regex_replace('[^A-Z0-9]+', '_') }}"

- name: Use provided Windows VM address when available
  ansible.builtin.set_fact:
    windows_collector_address: "{{ windows_vm_address | trim }}"
  when: windows_vm_address | default('') | length > 0

- name: Discover Windows VM address from KubeVirt
  ansible.builtin.command: >
    kubectl get vmi {{ windows_vm_name }} -n {{ windows_vm_namespace }} -o jsonpath='{.status.interfaces[0].ipAddress}'
  register: windows_vm_ip_discovery
  changed_when: false
  when: windows_vm_address | default('') | length == 0

- name: Register discovered Windows VM address
  ansible.builtin.set_fact:
    windows_collector_address: "{{ windows_vm_ip_discovery.stdout | default('') | trim }}"
  when: windows_vm_address | default('') | length == 0

- name: Validate resolved Windows VM address
  ansible.builtin.assert:
    that:
      - windows_collector_address | default('') | length > 0
    fail_msg: "Unable to determine address for Windows VM {{ windows_vm_name }}"

- name: Start WinRM HTTPS port-forward for Windows exporter configuration
  ansible.builtin.command:
    cmd: "{{ playbook_dir }}/library/start_portforward.sh {{ windows_portforward_service }} 5986 {{ windows_vm_namespace }} {{ windows_portforward_log }} {{ windows_portforward_pid }}"
  async: 10
  poll: 0
  changed_when: false

- name: Wait for WinRM HTTPS port-forward
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 5986
    delay: 2
    timeout: 40

- name: Define Windows WinRM connection variables
  ansible.builtin.set_fact:
    windows_winrm_connection:
      ansible_connection: winrm
      ansible_user: "{{ windows_admin_username }}"
      ansible_password: "{{ windows_admin_password }}"
      ansible_host: localhost
      ansible_winrm_transport: ssl
      ansible_winrm_server_cert_validation: ignore
      ansible_winrm_port: 5986
      ansible_winrm_scheme: https
  no_log: true

- name: Confirm WinRM connectivity to Windows VM
  ansible.windows.win_command:
    cmd: hostname
  register: windows_hostname_check
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Ensure Windows telemetry working directories exist
  ansible.windows.win_file:
    path: "{{ item }}"
    state: directory
  loop:
    - C:\\Data
    - C:\\Data\\temp
    - C:\\Data\\windows_exporter
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Compute Windows exporter download paths
  ansible.builtin.set_fact:
    windows_exporter_download_url: "https://github.com/prometheus-community/windows_exporter/releases/download/v{{ windows_exporter_version }}/windows_exporter-{{ windows_exporter_version }}-amd64.exe"
    windows_exporter_download_path: "C:\\Data\\temp\\windows_exporter-{{ windows_exporter_version }}-amd64.exe"
    windows_exporter_install_dir: "C:\\Data\\windows_exporter"

- name: Download and install Prometheus Windows exporter
  ansible.windows.win_shell: |
    $ErrorActionPreference = 'Stop'
    $downloadUrl = "{{ windows_exporter_download_url }}"
    $downloadPath = "{{ windows_exporter_download_path }}"
    $installDir = "{{ windows_exporter_install_dir }}"
    $binary = Join-Path $installDir 'windows_exporter.exe'
    $currentVersion = ''
    if (Test-Path $binary) {
      $info = Get-Item $binary
      $currentVersion = $info.VersionInfo.FileVersion
    }
    if (-not $currentVersion -or -not $currentVersion.StartsWith("{{ windows_exporter_version }}")) {
      Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath -UseBasicParsing
      New-Item -Path $installDir -ItemType Directory -Force | Out-Null
      Copy-Item -Path $downloadPath -Destination $binary -Force
    }
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"
  changed_when: false

- name: Verify Windows exporter binary availability
  ansible.windows.win_shell: |
    $ErrorActionPreference = 'Stop'
    $binary = Join-Path "{{ windows_exporter_install_dir }}" 'windows_exporter.exe'
    if (-not (Test-Path $binary)) {
      throw "windows_exporter.exe not found at $binary"
    }
    & $binary --version | Out-String
  register: windows_exporter_version_check
  changed_when: false
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Normalize Windows exporter version string
  ansible.builtin.set_fact:
    windows_exporter_version_normalized: "{{ windows_exporter_version | string | regex_replace('^v', '') }}"

- name: Determine Windows exporter flag mode
  ansible.builtin.set_fact:
    windows_exporter_use_web_flags: >-
      {{
        (windows_exporter_flag_mode == 'web')
        or (
          windows_exporter_flag_mode == 'auto'
          and (
            (windows_exporter_version_normalized.split('.')[0] | default('0', true) | int) > 0
            or (
              (windows_exporter_version_normalized.split('.')[0] | default('0', true) | int) == 0
              and (windows_exporter_version_normalized.split('.')[1] | default('0', true) | int) >= 30
            )
          )
        )
      }}

- name: Determine Windows exporter collector defaults
  ansible.builtin.set_fact:
    windows_collectors_base: "{{ windows_exporter_use_web_flags | ternary(['cpu', 'memory', 'logical_disk', 'physical_disk', 'net', 'os', 'service', 'system'], ['cpu', 'cs', 'logical_disk', 'net', 'os', 'service', 'system']) }}"

- name: Determine Windows exporter collector sets
  ansible.builtin.set_fact:
    windows_collectors_enabled: "{{ (windows_collectors_base + windows_extra_collectors_list + (enable_sql_collector | ternary(['mssql'], []))) | unique | list }}"
    windows_collect_params: "{{ (windows_collectors_base + windows_extra_collectors_list + (enable_sql_collector | ternary(['mssql'], []))) | unique | list }}"

- name: Determine Windows exporter CLI flags
  ansible.builtin.set_fact:
    windows_exporter_listen_flag: "{{ windows_exporter_use_web_flags | ternary('--web.listen-address', '--telemetry.addr') }}"
    windows_exporter_metrics_flag: "--telemetry.path"

- name: Debug Windows exporter flag selection
  ansible.builtin.debug:
    msg:
      - "windows_exporter_version: {{ windows_exporter_version }}"
      - "windows_exporter_version_normalized: {{ windows_exporter_version_normalized }}"
      - "windows_exporter_flag_mode: {{ windows_exporter_flag_mode }}"
      - "windows_exporter_use_web_flags: {{ windows_exporter_use_web_flags }}"
      - "windows_exporter_listen_flag: {{ windows_exporter_listen_flag }}"
      - "windows_exporter_metrics_flag: {{ windows_exporter_metrics_flag }}"
  when: otel_windows_debug | default(false)

- name: Prepare Windows exporter service arguments
  ansible.builtin.set_fact:
    windows_exporter_argument_list: "{{ windows_exporter_arguments_base }}"
    windows_exporter_arguments: "{{ windows_exporter_arguments_base | join(' ') }}"
  vars:
    windows_exporter_arguments_base: "{{ [
      windows_exporter_listen_flag ~ '=:' ~ windows_exporter_port,
      windows_exporter_metrics_flag ~ '=' ~ windows_exporter_metrics_path,
      '--collectors.enabled=' ~ (windows_collectors_enabled | join(','))
    ] }}"

- name: Debug Windows exporter argument list
  ansible.builtin.debug:
    msg:
      - "windows_exporter_argument_list: {{ windows_exporter_argument_list }}"
      - "windows_exporter_arguments: {{ windows_exporter_arguments }}"
  when: otel_windows_debug | default(false)

- name: Configure Windows exporter service
  ansible.windows.win_shell: |
    $ErrorActionPreference = 'Stop'
    $installDir = "{{ windows_exporter_install_dir }}"
    $binary = Join-Path $installDir 'windows_exporter.exe'
    if (-not (Test-Path $binary)) { throw "windows_exporter executable not found at $binary" }
    $arguments = "{{ windows_exporter_arguments }}"
    $binPathValue = "`"$binary`" $arguments"
    $service = Get-Service -Name 'windows_exporter' -ErrorAction SilentlyContinue
    if ($service) {
      if ($service.Status -eq 'Running') { Stop-Service -Name 'windows_exporter' -Force }
      sc.exe config windows_exporter binPath= "$binPathValue" | Out-Null
    } else {
      New-Service -Name 'windows_exporter' -BinaryPathName $binPathValue -DisplayName 'Prometheus Windows Exporter' -StartupType Automatic | Out-Null
    }
    Set-Service -Name 'windows_exporter' -StartupType Automatic
    try {
      Start-Service -Name 'windows_exporter'
    } catch {
      $errorMsg = $_.Exception.Message
      $scQuery = sc.exe query windows_exporter | Out-String
      $recentEvents = Get-WinEvent -FilterHashtable @{LogName='System'; ProviderName='Service Control Manager'; StartTime=(Get-Date).AddMinutes(-5)} -MaxEvents 5 | Format-List TimeCreated, Id, LevelDisplayName, Message | Out-String
      try {
        $exporterEvents = Get-WinEvent -FilterHashtable @{LogName='Application'; ProviderName='windows_exporter'; StartTime=(Get-Date).AddMinutes(-5)} -MaxEvents 5 | Format-List TimeCreated, Id, LevelDisplayName, Message | Out-String
      } catch {
        $exporterEvents = "Unable to retrieve windows_exporter events: $($_.Exception.Message)"
      }
      throw "Failed to start windows_exporter service: $errorMsg`nSC QUERY OUTPUT:`n$scQuery`nService Control Manager events:`n$recentEvents`nwindows_exporter events:`n$exporterEvents"
    }
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Gather windows_exporter service status
  ansible.windows.win_shell: |
    sc.exe query windows_exporter | Out-String
  register: windows_exporter_service_status
  changed_when: false
  failed_when: false
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Report windows_exporter service status
  ansible.builtin.debug:
    msg: "windows_exporter service status:\n{{ windows_exporter_service_status.stdout | default('no output') }}"

- name: Gather recent windows_exporter events
  ansible.windows.win_shell: |
    $start = (Get-Date).AddMinutes(-10)
    $scmEvents = Get-WinEvent -FilterHashtable @{LogName='System'; ProviderName='Service Control Manager'; StartTime=$start} -MaxEvents 10 | Format-List TimeCreated, Id, LevelDisplayName, Message | Out-String
    try {
      $exporterEvents = Get-WinEvent -FilterHashtable @{LogName='Application'; ProviderName='windows_exporter'; StartTime=$start} -MaxEvents 10 | Format-List TimeCreated, Id, LevelDisplayName, Message | Out-String
    } catch {
      $exporterEvents = "Unable to retrieve windows_exporter events: $($_.Exception.Message)"
    }
    "Service Control Manager events:\n$scmEvents`nwindows_exporter events:\n$exporterEvents"
  register: windows_exporter_event_log
  changed_when: false
  failed_when: false
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Report windows_exporter recent events
  ansible.builtin.debug:
    msg: "{{ windows_exporter_event_log.stdout | default('No recent events captured') }}"

- name: Run windows_exporter diagnostic probe when service stopped
  ansible.windows.win_shell: |
    $ErrorActionPreference = 'Stop'
    $binary = Join-Path "{{ windows_exporter_install_dir }}" 'windows_exporter.exe'
    if (-not (Test-Path $binary)) {
      throw "windows_exporter.exe missing at $binary"
    }
    $arguments = "{{ windows_exporter_arguments }}"
    $stdoutPath = Join-Path "{{ windows_exporter_install_dir }}" 'windows_exporter-diagnostic-stdout.log'
    $stderrPath = Join-Path "{{ windows_exporter_install_dir }}" 'windows_exporter-diagnostic-stderr.log'
    if (Test-Path $stdoutPath) { Remove-Item $stdoutPath -Force }
    if (Test-Path $stderrPath) { Remove-Item $stderrPath -Force }
    $proc = Start-Process -FilePath $binary -ArgumentList $arguments -PassThru -WindowStyle Hidden -RedirectStandardOutput $stdoutPath -RedirectStandardError $stderrPath
    Start-Sleep -Seconds 5
    if (-not $proc.HasExited) {
      $proc.Kill()
      $status = 'stopped after 5-second diagnostic window'
    } else {
      $status = "exited with code $($proc.ExitCode)"
    }
    $stdout = if (Test-Path $stdoutPath) { Get-Content $stdoutPath | Out-String } else { '' }
    $stderr = if (Test-Path $stderrPath) { Get-Content $stderrPath | Out-String } else { '' }
    "windows_exporter diagnostic run $status`nSTDOUT:`n$stdout`nSTDERR:`n$stderr"
  register: windows_exporter_diagnostic
  changed_when: false
  failed_when: false
  when:
    - windows_exporter_service_status.stdout is defined
    - windows_exporter_service_status.stdout is search('STATE              : 1')
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Report windows_exporter diagnostic results
  ansible.builtin.debug:
    msg: "{{ windows_exporter_diagnostic.stdout | default('Diagnostic run not executed') }}"
  when:
    - windows_exporter_service_status.stdout is defined
    - windows_exporter_service_status.stdout is search('STATE              : 1')

- name: Ensure firewall allows Windows exporter port
  ansible.windows.win_shell: |
    $ErrorActionPreference = 'Stop'
    $ruleName = "Windows Exporter {{ windows_exporter_port }}"
    $existing = Get-NetFirewallRule -DisplayName $ruleName -ErrorAction SilentlyContinue
    if ($existing) {
      Remove-NetFirewallRule -DisplayName $ruleName
    }
    New-NetFirewallRule -DisplayName $ruleName -Direction Inbound -Action Allow -Protocol TCP -LocalPort {{ windows_exporter_port }}
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Verify Windows exporter responding locally
  ansible.windows.win_uri:
    url: "http://localhost:{{ windows_exporter_port }}/metrics?collect[]=cpu"
    method: GET
    status_code: 200
  register: windows_exporter_probe
  retries: 5
  delay: 3
  until: windows_exporter_probe.status_code == 200
  vars:
    ansible_connection: "{{ windows_winrm_connection.ansible_connection }}"
    ansible_user: "{{ windows_winrm_connection.ansible_user }}"
    ansible_password: "{{ windows_winrm_connection.ansible_password }}"
    ansible_host: "{{ windows_winrm_connection.ansible_host }}"
    ansible_winrm_transport: "{{ windows_winrm_connection.ansible_winrm_transport }}"
    ansible_winrm_server_cert_validation: "{{ windows_winrm_connection.ansible_winrm_server_cert_validation }}"
    ansible_winrm_port: "{{ windows_winrm_connection.ansible_winrm_port }}"
    ansible_winrm_scheme: "{{ windows_winrm_connection.ansible_winrm_scheme }}"

- name: Prepare Windows collector identifiers for central pipeline
  ansible.builtin.set_fact:
    windows_receiver_name: "prometheus/windows-{{ windows_collector_slug }}"
    windows_exporter_name_id: "otlphttp/windows-{{ windows_collector_slug }}"
    windows_pipeline_name: "metrics/windows-{{ windows_collector_slug }}"

- name: Merge Windows scrape pipeline into collector configuration
  ansible.builtin.set_fact:
    otel_config: "{{ otel_config | combine(windows_config_fragment, recursive=True) }}"
  vars:
    windows_config_fragment: >-
      {{ {
          'receivers': {
            windows_receiver_name: {
              'config': {
                'scrape_configs': [
                  {
                    'job_name': 'windows-' ~ windows_collector_slug,
                    'scrape_interval': '30s',
                    'metrics_path': '/metrics',
                    'params': {
                      'collect[]': windows_collect_params
                    },
                    'static_configs': [
                      {
                        'targets': [ windows_collector_address ~ ':' ~ (windows_exporter_port | string) ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          'exporters': {
            windows_exporter_name_id: {
              'endpoint': '${' ~ windows_env_endpoint_var ~ '}',
              'headers': {
                'Authorization': 'Bearer ${' ~ windows_env_token_var ~ '}'
              },
              'tls': {
                'insecure': True
              }
            }
          },
          'service': {
            'pipelines': {
              windows_pipeline_name: {
                'receivers': [ windows_receiver_name ],
                'processors': [ 'batch' ],
                'exporters': [ windows_exporter_name_id ]
              }
            }
          }
        } }}

- name: Track configured Windows collector details
  ansible.builtin.set_fact:
    configured_windows_collectors: "{{ (configured_windows_collectors | default([], true) | rejectattr('vm_name', 'equalto', windows_vm_name) | list) + [ {
      'name': windows_collector_name,
      'vm_name': windows_vm_name,
      'namespace': windows_vm_namespace,
      'address': windows_collector_address,
      'metrics_port': windows_exporter_port,
      'collectors': windows_collectors_enabled,
      'slug': windows_collector_slug,
      'otel_endpoint': windows_otel_endpoint
    } ] }}"

- name: Append Windows exporter credentials for deployment env vars
  ansible.builtin.set_fact:
    otel_env_vars: "{{ (otel_env_vars | rejectattr('name', 'equalto', windows_env_endpoint_var) | rejectattr('name', 'equalto', windows_env_token_var) | list) + [
      { 'name': windows_env_endpoint_var, 'value': windows_otel_endpoint },
      { 'name': windows_env_token_var, 'value': windows_otel_token }
    ] }}"
  no_log: true

- name: Stop WinRM HTTPS port-forward
  ansible.builtin.shell: |
    if [ -f "{{ windows_portforward_pid }}" ]; then
      kill $(cat "{{ windows_portforward_pid }}") 2>/dev/null || true
      rm -f "{{ windows_portforward_pid }}"
    fi
    pkill -f "port-forward.*{{ windows_portforward_service }}.*5986" 2>/dev/null || true
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false

- name: Stop Vault port-forward started for Windows credentials
  ansible.builtin.shell: |
    if [ -f "{{ windows_vault_portforward_pid }}" ]; then
      kill $(cat "{{ windows_vault_portforward_pid }}") 2>/dev/null || true
      rm -f "{{ windows_vault_portforward_pid }}"
    fi
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  when: windows_vault_portforward_started | default(false)

- name: Show Windows telemetry configuration summary
  ansible.builtin.debug:
    msg:
      - "Windows telemetry configured for VM '{{ windows_vm_name }}' using prometheus scrape model"
      - "WinRM hostname: {{ windows_hostname_check.stdout | default('unknown-host') }}"
      - "Exporter listen: http://{{ windows_collector_address }}:{{ windows_exporter_port }}"
      - "Collectors enabled: {{ windows_collectors_enabled | join(', ') }}"
      - "Admin credential source: {{ windows_admin_password_source | default('unknown') }}"
      - "Metrics forwarded to: {{ windows_otel_endpoint }}"

