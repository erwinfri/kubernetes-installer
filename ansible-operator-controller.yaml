---
- name: Build, push, deploy, query status, or uninstall Ansible Operator
  hosts: localhost
  gather_facts: false
  vars:
    image_name: "ansible-operator:ubi9"
    image_tag: "localhost:5000/ansible-operator:ubi9"
    dockerfile: "ansible-operator/Dockerfile.ansible-operator"
    k8s_namespace: "default"
    action: "install"  # valid: install | status | uninstall
    manifest_files:
      - "ansible-operator/ansible-operator-configmap.yaml"
      - "ansible-operator/ansible-operator-rbac.yaml"
      - "ansible-operator/ansible-operator.yaml"
  pre_tasks:
    - name: Validate action value
      ansible.builtin.assert:
        that:
          - action in ['install','status','uninstall']
        fail_msg: "Invalid action '{{ action }}'. Use one of: install, status, uninstall."

    - name: Check required CLIs are available
      ansible.builtin.shell: |
        for cmd in podman kubectl; do command -v "$cmd" || exit 2; done
      register: check_cli
      changed_when: false
      failed_when: check_cli.rc != 0 and action == 'install'

  tasks:
    - name: Ensure WindowsVM CRD is installed
      ansible.builtin.shell: |
        kubectl apply -f ansible-operator/infra_v1_windowsvm_crd.yaml -n {{ k8s_namespace }}
      args:
        chdir: "{{ playbook_dir }}"
      register: crd_apply
      changed_when: false
      when: action == 'install'
    - name: Ensure local registry is running on :5000
      ansible.builtin.shell: |
        podman ps --format '{{ '{{.Names}}' }}' | grep -q '^registry$' || \
        podman run -d -p 5000:5000 --name registry --restart=always registry:2
      args:
        chdir: "{{ playbook_dir }}"
      register: registry_result
      changed_when: registry_result.rc == 0
      when: action == 'install'

    - name: Build the custom ansible-operator image with Podman (no cache)
      ansible.builtin.shell: |
        podman build --no-cache -t {{ image_name }} -f {{ dockerfile }} .
      args:
        chdir: "{{ playbook_dir }}"
      register: build_result
      changed_when: build_result.rc == 0
      when: action == 'install'

    - name: Tag image for local registry
      ansible.builtin.shell: |
        podman tag {{ image_name }} {{ image_tag }}
      args:
        chdir: "{{ playbook_dir }}"
      register: tag_result
      changed_when: tag_result.rc == 0
      when: action == 'install'

    - name: Push image to local registry (insecure HTTP)
      ansible.builtin.shell: |
        podman push --tls-verify=false {{ image_tag }}
      args:
        chdir: "{{ playbook_dir }}"
      register: push_result
      changed_when: push_result.rc == 0
      when: action == 'install'

    - name: Show push summary
      ansible.builtin.debug:
        var: push_result.stdout
      when: action == 'install'

    - name: Apply manifests (ConfigMap, RBAC, Deployment)
      ansible.builtin.shell: |
        for f in {{ manifest_files | join(' ') }}; do
          echo "Applying $f";
          kubectl apply -f "$f" -n {{ k8s_namespace }};
        done
      args:
        chdir: "{{ playbook_dir }}"
      register: apply_result
      changed_when: false
      when: action == 'install'

    - name: Restart the ansible-operator Deployment to pick up new image
      ansible.builtin.shell: |
        kubectl rollout restart deployment/ansible-operator -n {{ k8s_namespace }}
      register: restart_result
      changed_when: restart_result.rc == 0
      when: action == 'install'

    - name: Wait for rollout to complete
      ansible.builtin.shell: |
        kubectl rollout status deployment/ansible-operator -n {{ k8s_namespace }} --timeout=120s
      register: status_result
      changed_when: false
      when: action == 'install'

    - name: Apply sample WindowsVM Custom Resource to trigger reconcile
      ansible.builtin.shell: |
        kubectl delete -f windowsvm2025.yaml -n {{ k8s_namespace }} --ignore-not-found=true || true
        sleep 1
        kubectl apply -f windowsvm2025.yaml -n {{ k8s_namespace }}
      args:
        chdir: "{{ playbook_dir }}"
      register: cr_apply
      changed_when: false
      when: action == 'install'

    - name: Show operator logs (last 100 lines)
      ansible.builtin.shell: |
        kubectl logs -l app=ansible-operator --tail=100 --timestamps --all-containers=true
      args:
        chdir: "{{ playbook_dir }}"
      register: operator_logs
      changed_when: false
      when: action == 'install'

    - name: Show operator pods
      ansible.builtin.shell: |
        kubectl get pods -l app=ansible-operator -o wide -n {{ k8s_namespace }}
      register: pods_result
      changed_when: false
      failed_when: false
      when: action in ['install','status']

    - name: Output pods
      ansible.builtin.debug:
        var: pods_result.stdout
      when: action in ['install','status']

    - name: Show deployment image and args (status)
      ansible.builtin.shell: |
        echo "Deployment image:" && \
        kubectl get deploy ansible-operator -n {{ k8s_namespace }} -o jsonpath='{.spec.template.spec.containers[0].image}' && echo && \
        echo "Args:" && \
        kubectl get deploy ansible-operator -n {{ k8s_namespace }} -o jsonpath='{.spec.template.spec.containers[0].args}' && echo
      register: deploy_info
      changed_when: false
      failed_when: false
      when: action == 'status'

    - name: Output deployment details
      ansible.builtin.debug:
        var: deploy_info.stdout
      when: action == 'status'

    - name: Delete manifests (Deployment, RBAC, ConfigMap)
      ansible.builtin.shell: |
        # Delete in reverse dependency order
        kubectl delete -f ansible-operator/ansible-operator.yaml -n {{ k8s_namespace }} --ignore-not-found=true || true
        kubectl delete -f ansible-operator/ansible-operator-rbac.yaml -n {{ k8s_namespace }} --ignore-not-found=true || true
        kubectl delete -f ansible-operator/ansible-operator-configmap.yaml -n {{ k8s_namespace }} --ignore-not-found=true || true
      args:
        chdir: "{{ playbook_dir }}"
      register: delete_result
      changed_when: false
      when: action == 'uninstall'

    - name: Wait until all ansible-operator pods are gone
      ansible.builtin.shell: |
        kubectl get pods -l app=ansible-operator -n {{ k8s_namespace }} --no-headers 2>/dev/null | wc -l
      register: pod_count
      retries: 20
      delay: 3
      until: pod_count.stdout | int == 0
      changed_when: false
      failed_when: false
      when: action == 'uninstall'
